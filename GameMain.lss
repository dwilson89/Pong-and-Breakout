
GameMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024c  00800100  000020f4  00002188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000271  0080034c  0080034c  000023d4  2**0
                  ALLOC
  3 .debug_aranges 00000278  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006f2  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001985  00000000  00000000  00002d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000859  00000000  00000000  000046c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002261  00000000  00000000  00004f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  00007180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009e6  00000000  00000000  000075b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014a0  00000000  00000000  00007f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000338  00000000  00000000  00009436  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		
	}
}

// Extend this file with whatever other graphical functions you need for your assignment...
void DrawBox(unsigned char x1, unsigned char x2, unsigned char y1, unsigned char y2){
       0:	ba c0       	rjmp	.+372    	; 0x176 <__ctors_end>
	DDRB = 0xFF;
	//leaving SP12X SPR1 SPRO should default to zeroes 0 0 0 - fclk/4
	SPCR =(1<<SPE)|(1<<MSTR);
}

void SPIWriteByte(unsigned char byte) {
       2:	00 00       	nop
	OCR1A = 0x4E1F;
	TCNT1 = 0xB1E0;
	TIMSK1 = (1<<TOIE1);
	sei();
	
}
       4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
}

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
       6:	00 00       	nop
       8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
       a:	00 00       	nop
       c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
       e:	00 00       	nop
      10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
      12:	00 00       	nop
      14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
      16:	00 00       	nop
      18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
      1e:	00 00       	nop
      20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
      22:	00 00       	nop
      24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_10>
      2c:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__vector_11>
      30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
      32:	00 00       	nop
      34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
      36:	00 00       	nop
      38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
      3e:	00 00       	nop
      40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
      42:	00 00       	nop
      44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
      46:	00 00       	nop
      48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_20>
      54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
      56:	00 00       	nop
      58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
      5e:	00 00       	nop
      60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
      62:	00 00       	nop
      64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
      66:	00 00       	nop
      68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
      72:	00 00       	nop
      74:	38 c2       	rjmp	.+1136   	; 0x4e6 <__vector_29>
      76:	00 00       	nop
      78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
      7a:	00 00       	nop
      7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
      7e:	00 00       	nop
      80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
      82:	00 00       	nop
      84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
      86:	00 00       	nop
      88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
      8a:	00 00       	nop
      8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
      8e:	00 00       	nop
      90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
      92:	00 00       	nop
      94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
      96:	00 00       	nop
      98:	8a c0       	rjmp	.+276    	; 0x1ae <__bad_interrupt>
      9a:	00 00       	nop
      9c:	88 c0       	rjmp	.+272    	; 0x1ae <__bad_interrupt>
      9e:	00 00       	nop
      a0:	86 c0       	rjmp	.+268    	; 0x1ae <__bad_interrupt>
      a2:	00 00       	nop
      a4:	84 c0       	rjmp	.+264    	; 0x1ae <__bad_interrupt>
      a6:	00 00       	nop
      a8:	82 c0       	rjmp	.+260    	; 0x1ae <__bad_interrupt>
      aa:	00 00       	nop

000000ac <descriptor_list>:
      ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..
      bc:	00 00 35 01 04 01 03 09 04 39 01 14 02 03 09 04     ..5......9......
      cc:	4f 01 16 03 03 09 04 67 01 0c                       O......g..

000000d6 <endpoint_config_table>:
      d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
      e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
      f0:	03 01                                               ..

000000f2 <config1_descriptor>:
      f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     132:	40 00 00                                            @..

00000135 <string0>:
     135:	04 03 09 04                                         ....

00000139 <string1>:
     139:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
     149:	6d 00 65 00 00 00                                   m.e...

0000014f <string2>:
     14f:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     15f:	69 00 61 00 6c 00 00 00                             i.a.l...

00000167 <string3>:
     167:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00 00        ..1.2.3.4.5....

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	da e0       	ldi	r29, 0x0A	; 10
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	13 e0       	ldi	r17, 0x03	; 3
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	e4 ef       	ldi	r30, 0xF4	; 244
     18a:	f0 e2       	ldi	r31, 0x20	; 32
     18c:	02 c0       	rjmp	.+4      	; 0x192 <.do_copy_data_start>

0000018e <.do_copy_data_loop>:
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0

00000192 <.do_copy_data_start>:
     192:	ac 34       	cpi	r26, 0x4C	; 76
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <.do_copy_data_loop>

00000198 <__do_clear_bss>:
     198:	15 e0       	ldi	r17, 0x05	; 5
     19a:	ac e4       	ldi	r26, 0x4C	; 76
     19c:	b3 e0       	ldi	r27, 0x03	; 3
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	ad 3b       	cpi	r26, 0xBD	; 189
     1a4:	b1 07       	cpc	r27, r17
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	4f d0       	rcall	.+158    	; 0x248 <main>
     1aa:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_exit>

000001ae <__bad_interrupt>:
     1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <Countdown>:

	}
}

//Function to Countdown
void Countdown(){
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	13 e3       	ldi	r17, 0x33	; 51
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1b8:	c0 e9       	ldi	r28, 0x90	; 144
     1ba:	d1 e0       	ldi	r29, 0x01	; 1

	unsigned char cDChar = '3';

	while(countDownInt < 3){

		LCDClear();
     1bc:	e6 d1       	rcall	.+972    	; 0x58a <LCDClear>
     1be:	88 e8       	ldi	r24, 0x88	; 136
     1c0:	93 e1       	ldi	r25, 0x13	; 19
     1c2:	fe 01       	movw	r30, r28
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <Countdown+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <Countdown+0x12>
		_delay_ms(500);
		LCDPosition((83-7)/2, 3);
     1cc:	86 e2       	ldi	r24, 0x26	; 38
     1ce:	63 e0       	ldi	r22, 0x03	; 3
     1d0:	1e d2       	rcall	.+1084   	; 0x60e <LCDPosition>
		LCDCharacter(cDChar - countDownInt);
     1d2:	81 2f       	mov	r24, r17
     1d4:	e9 d1       	rcall	.+978    	; 0x5a8 <LCDCharacter>
     1d6:	88 e8       	ldi	r24, 0x88	; 136
     1d8:	93 e1       	ldi	r25, 0x13	; 19
     1da:	fe 01       	movw	r30, r28
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <Countdown+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e2:	d9 f7       	brne	.-10     	; 0x1da <Countdown+0x2a>
     1e4:	11 50       	subi	r17, 0x01	; 1

	int countDownInt = 0;

	unsigned char cDChar = '3';

	while(countDownInt < 3){
     1e6:	10 33       	cpi	r17, 0x30	; 48
     1e8:	49 f7       	brne	.-46     	; 0x1bc <Countdown+0xc>
		LCDPosition((83-7)/2, 3);
		LCDCharacter(cDChar - countDownInt);
		_delay_ms(500);
		countDownInt++;
	}
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	1f 91       	pop	r17
     1f0:	08 95       	ret

000001f2 <UpdateOptions>:
	int yPongStr = 3;

	int xBOStr = (83 - 10*7)/2;
	int yBOStr = 4;

	if (option == 1){
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	91 05       	cpc	r25, r1
     1f6:	61 f4       	brne	.+24     	; 0x210 <UpdateOptions+0x1e>
		
		LCDPosition(xBOStr, yBOStr);
     1f8:	86 e0       	ldi	r24, 0x06	; 6
     1fa:	64 e0       	ldi	r22, 0x04	; 4
     1fc:	08 d2       	rcall	.+1040   	; 0x60e <LCDPosition>
		LCDString(breakOutString);
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	fa d1       	rcall	.+1012   	; 0x5f8 <LCDString>
		LCDPosition(xPongStr, yPongStr);
     204:	88 e1       	ldi	r24, 0x18	; 24
     206:	63 e0       	ldi	r22, 0x03	; 3
     208:	02 d2       	rcall	.+1028   	; 0x60e <LCDPosition>
		LCDString(pongStringO);
     20a:	8c e0       	ldi	r24, 0x0C	; 12
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	f4 c1       	rjmp	.+1000   	; 0x5f8 <LCDString>

	} else if (option == 2){
     210:	02 97       	sbiw	r24, 0x02	; 2
     212:	61 f4       	brne	.+24     	; 0x22c <UpdateOptions+0x3a>

		LCDPosition(xPongStr, yPongStr);
     214:	88 e1       	ldi	r24, 0x18	; 24
     216:	63 e0       	ldi	r22, 0x03	; 3
     218:	fa d1       	rcall	.+1012   	; 0x60e <LCDPosition>
		LCDString(pongString);
     21a:	82 e1       	ldi	r24, 0x12	; 18
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	ec d1       	rcall	.+984    	; 0x5f8 <LCDString>
		LCDPosition(xBOStr, yBOStr);
     220:	86 e0       	ldi	r24, 0x06	; 6
     222:	64 e0       	ldi	r22, 0x04	; 4
     224:	f4 d1       	rcall	.+1000   	; 0x60e <LCDPosition>
		LCDString(breakOutStringO);
     226:	88 e1       	ldi	r24, 0x18	; 24
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	e6 c1       	rjmp	.+972    	; 0x5f8 <LCDString>
     22c:	08 95       	ret

0000022e <GenerateIntroScreen>:
}

//Function to generate the Intro Screen
void GenerateIntroScreen(){

	LCDClear();
     22e:	ad d1       	rcall	.+858    	; 0x58a <LCDClear>
	int yPosStuName = 0;

	int xPosStuNo = (83 - 8*7)/2;
	int yPosStuNo = 1;

	LCDPosition(xPosStuName, yPosStuName);
     230:	8d e0       	ldi	r24, 0x0D	; 13
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	ec d1       	rcall	.+984    	; 0x60e <LCDPosition>
	LCDString(studentName);
     236:	83 e2       	ldi	r24, 0x23	; 35
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	de d1       	rcall	.+956    	; 0x5f8 <LCDString>
	LCDPosition(xPosStuNo, yPosStuNo);
     23c:	8d e0       	ldi	r24, 0x0D	; 13
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	e6 d1       	rcall	.+972    	; 0x60e <LCDPosition>
	LCDString(studentNumber);
     242:	8c e2       	ldi	r24, 0x2C	; 44
     244:	91 e0       	ldi	r25, 0x01	; 1

}
     246:	d8 c1       	rjmp	.+944    	; 0x5f8 <LCDString>

00000248 <main>:

void GenerateIntroScreen();
void UpdateOptions(int option);
void Countdown();

int main(void){
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29

	BUTTON_ONE;
     250:	59 9a       	sbi	0x0b, 1	; 11
	BUTTON_TWO;
     252:	5a 9a       	sbi	0x0b, 2	; 11

	LED1_CONFIG;
     254:	87 9a       	sbi	0x10, 7	; 16
	LED1_OFF;
     256:	8f 98       	cbi	0x11, 7	; 17

	usb_init();
     258:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <usb_init>
	unsigned char contrast = 100;
	LCDInitialise(contrast);
     25c:	84 e6       	ldi	r24, 0x64	; 100
     25e:	76 d1       	rcall	.+748    	; 0x54c <LCDInitialise>
     260:	00 e9       	ldi	r16, 0x90	; 144
     262:	11 e0       	ldi	r17, 0x01	; 1
	//to keep track of option selected;
	int option = 1;

	while(1){

		GenerateIntroScreen();
     264:	e4 df       	rcall	.-56     	; 0x22e <GenerateIntroScreen>
		UpdateOptions(option);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	c3 df       	rcall	.-122    	; 0x1f2 <UpdateOptions>
     26c:	c1 e0       	ldi	r28, 0x01	; 1
     26e:	d0 e0       	ldi	r29, 0x00	; 0

		while (gameState == 0){

			//GenerateIntroScreen();
			UpdateOptions(option);
     270:	ce 01       	movw	r24, r28
     272:	bf df       	rcall	.-130    	; 0x1f2 <UpdateOptions>

			//look for button press		
			//if button one (start button);
			if(!(PIND & (1 << PD1))){
     274:	49 9b       	sbis	0x09, 1	; 9
     276:	1a c0       	rjmp	.+52     	; 0x2ac <main+0x64>

				gameState = option;
				
			} else if(!(PIND & (1 << PD2))){
     278:	4a 99       	sbic	0x09, 2	; 9
     27a:	fa cf       	rjmp	.-12     	; 0x270 <main+0x28>

				option++;
     27c:	21 96       	adiw	r28, 0x01	; 1
     27e:	88 ee       	ldi	r24, 0xE8	; 232
     280:	93 e0       	ldi	r25, 0x03	; 3
     282:	f8 01       	movw	r30, r16
     284:	31 97       	sbiw	r30, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     288:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28a:	d9 f7       	brne	.-10     	; 0x282 <main+0x3a>
				_delay_ms(100);
			}

			//resets option choice
			if(option > 2){
     28c:	c2 30       	cpi	r28, 0x02	; 2
     28e:	d1 05       	cpc	r29, r1
     290:	69 f7       	brne	.-38     	; 0x26c <main+0x24>
     292:	ee cf       	rjmp	.-36     	; 0x270 <main+0x28>

			}
		}

		if(gameState == 1){
			Countdown();
     294:	8d df       	rcall	.-230    	; 0x1b0 <Countdown>
			PlayGame(1);
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <main+0x5e>

		} else if(gameState == 2){
     29c:	22 97       	sbiw	r28, 0x02	; 2
     29e:	11 f7       	brne	.-60     	; 0x264 <main+0x1c>
			Countdown();
     2a0:	87 df       	rcall	.-242    	; 0x1b0 <Countdown>
			PlayGame(2);
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <PlayGame>
     2aa:	dc cf       	rjmp	.-72     	; 0x264 <main+0x1c>
				option = 1;

			}
		}

		if(gameState == 1){
     2ac:	c1 30       	cpi	r28, 0x01	; 1
     2ae:	d1 05       	cpc	r29, r1
     2b0:	a9 f7       	brne	.-22     	; 0x29c <main+0x54>
     2b2:	f0 cf       	rjmp	.-32     	; 0x294 <main+0x4c>

000002b4 <SetPixel>:
#include "Graphics.h"
#include "LCD.h"

unsigned char screenBuffer[LCD_BUFFER_SIZE]; // Our screen buffer array

void SetPixel(unsigned char x, unsigned char y, unsigned char value) {
     2b4:	58 2f       	mov	r21, r24
	// Calculate the LCD row
	int row = y/8;
     2b6:	86 2f       	mov	r24, r22
     2b8:	86 95       	lsr	r24
     2ba:	86 95       	lsr	r24
     2bc:	86 95       	lsr	r24
     2be:	28 2f       	mov	r18, r24
     2c0:	30 e0       	ldi	r19, 0x00	; 0
	// Calculate the pixel 'subrow', within that LCD row
	int subRow = y%8;
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	67 70       	andi	r22, 0x07	; 7
     2c6:	70 70       	andi	r23, 0x00	; 0
	
	// Set that particular pixel in our screen buffer
	//if value is set to high
	if(value == 1){
     2c8:	41 30       	cpi	r20, 0x01	; 1
     2ca:	c1 f4       	brne	.+48     	; 0x2fc <SetPixel+0x48>
		
		screenBuffer[(84*row)+x] |= (1 << subRow);
     2cc:	84 e5       	ldi	r24, 0x54	; 84
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	28 9f       	mul	r18, r24
     2d2:	f0 01       	movw	r30, r0
     2d4:	29 9f       	mul	r18, r25
     2d6:	f0 0d       	add	r31, r0
     2d8:	38 9f       	mul	r19, r24
     2da:	f0 0d       	add	r31, r0
     2dc:	11 24       	eor	r1, r1
     2de:	e5 0f       	add	r30, r21
     2e0:	f1 1d       	adc	r31, r1
     2e2:	e7 5a       	subi	r30, 0xA7	; 167
     2e4:	fc 4f       	sbci	r31, 0xFC	; 252
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <SetPixel+0x3c>
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	6a 95       	dec	r22
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <SetPixel+0x38>
     2f4:	20 81       	ld	r18, Z
     2f6:	28 2b       	or	r18, r24
     2f8:	20 83       	st	Z, r18
     2fa:	08 95       	ret
	
	//else if value is set to low
	}else if (value == 0){
     2fc:	44 23       	and	r20, r20
     2fe:	c1 f4       	brne	.+48     	; 0x330 <SetPixel+0x7c>
		
		screenBuffer[(84*row)+x] &= ~(1 << subRow);
     300:	84 e5       	ldi	r24, 0x54	; 84
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	28 9f       	mul	r18, r24
     306:	f0 01       	movw	r30, r0
     308:	29 9f       	mul	r18, r25
     30a:	f0 0d       	add	r31, r0
     30c:	38 9f       	mul	r19, r24
     30e:	f0 0d       	add	r31, r0
     310:	11 24       	eor	r1, r1
     312:	e5 0f       	add	r30, r21
     314:	f1 1d       	adc	r31, r1
     316:	e7 5a       	subi	r30, 0xA7	; 167
     318:	fc 4f       	sbci	r31, 0xFC	; 252
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	02 c0       	rjmp	.+4      	; 0x324 <SetPixel+0x70>
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	6a 95       	dec	r22
     326:	e2 f7       	brpl	.-8      	; 0x320 <SetPixel+0x6c>
     328:	80 95       	com	r24
     32a:	20 81       	ld	r18, Z
     32c:	28 23       	and	r18, r24
     32e:	20 83       	st	Z, r18
     330:	08 95       	ret

00000332 <DrawLine>:
	
	}
}

void DrawLine(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2) {
     332:	4f 92       	push	r4
     334:	5f 92       	push	r5
     336:	6f 92       	push	r6
     338:	7f 92       	push	r7
     33a:	8f 92       	push	r8
     33c:	9f 92       	push	r9
     33e:	af 92       	push	r10
     340:	bf 92       	push	r11
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	98 2e       	mov	r9, r24
     354:	86 2e       	mov	r8, r22
	// Insert algorithm here.
	int dx = x2 - x1;
     356:	64 2e       	mov	r6, r20
     358:	77 24       	eor	r7, r7
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	23 01       	movw	r4, r6
     35e:	48 1a       	sub	r4, r24
     360:	59 0a       	sbc	r5, r25
	int dy = y2 - y1;
     362:	c2 2e       	mov	r12, r18
     364:	dd 24       	eor	r13, r13
     366:	e6 2e       	mov	r14, r22
     368:	ff 24       	eor	r15, r15
     36a:	56 01       	movw	r10, r12
     36c:	ae 18       	sub	r10, r14
     36e:	bf 08       	sbc	r11, r15
	int x;
	int y;
	
	if(x1 == x2){
     370:	94 16       	cp	r9, r20
     372:	21 f4       	brne	.+8      	; 0x37c <DrawLine+0x4a>
     374:	c0 e0       	ldi	r28, 0x00	; 0
     376:	d0 e0       	ldi	r29, 0x00	; 0
	
		for(y = y1; y <= y2; y++){
     378:	87 01       	movw	r16, r14
     37a:	0c c0       	rjmp	.+24     	; 0x394 <DrawLine+0x62>
	int dx = x2 - x1;
	int dy = y2 - y1;
	int x;
	int y;
	
	if(x1 == x2){
     37c:	c0 e0       	ldi	r28, 0x00	; 0
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	10 e0       	ldi	r17, 0x00	; 0
			SetPixel(x1, y, 1);
			
		}
	} else {

		for(x = x1; x <= x2; x++){
     384:	6c 01       	movw	r12, r24
     386:	1a c0       	rjmp	.+52     	; 0x3bc <DrawLine+0x8a>
	
		for(y = y1; y <= y2; y++){
				
			//y = y1 + (dy) * (x-x1)/(dx);
		
			SetPixel(x1, y, 1);
     388:	68 2d       	mov	r22, r8
     38a:	6c 0f       	add	r22, r28
     38c:	89 2d       	mov	r24, r9
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	91 df       	rcall	.-222    	; 0x2b4 <SetPixel>
     392:	21 96       	adiw	r28, 0x01	; 1
	int x;
	int y;
	
	if(x1 == x2){
	
		for(y = y1; y <= y2; y++){
     394:	ce 01       	movw	r24, r28
     396:	80 0f       	add	r24, r16
     398:	91 1f       	adc	r25, r17
     39a:	c8 16       	cp	r12, r24
     39c:	d9 06       	cpc	r13, r25
     39e:	a4 f7       	brge	.-24     	; 0x388 <DrawLine+0x56>
     3a0:	15 c0       	rjmp	.+42     	; 0x3cc <DrawLine+0x9a>

		for(x = x1; x <= x2; x++){
		
			y = y1 + (dy) * (x-x1)/(dx);
		
			SetPixel(x, y, 1);
     3a2:	c8 01       	movw	r24, r16
     3a4:	8a 19       	sub	r24, r10
     3a6:	9b 09       	sbc	r25, r11
     3a8:	b2 01       	movw	r22, r4
     3aa:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divmodhi4>
     3ae:	6e 0d       	add	r22, r14
     3b0:	7f 1d       	adc	r23, r15
     3b2:	89 2d       	mov	r24, r9
     3b4:	8c 0f       	add	r24, r28
     3b6:	41 e0       	ldi	r20, 0x01	; 1
     3b8:	7d df       	rcall	.-262    	; 0x2b4 <SetPixel>
     3ba:	21 96       	adiw	r28, 0x01	; 1
     3bc:	0a 0d       	add	r16, r10
     3be:	1b 1d       	adc	r17, r11
			SetPixel(x1, y, 1);
			
		}
	} else {

		for(x = x1; x <= x2; x++){
     3c0:	ce 01       	movw	r24, r28
     3c2:	8c 0d       	add	r24, r12
     3c4:	9d 1d       	adc	r25, r13
     3c6:	68 16       	cp	r6, r24
     3c8:	79 06       	cpc	r7, r25
     3ca:	5c f7       	brge	.-42     	; 0x3a2 <DrawLine+0x70>
	
		}
	}
	//PresentBuffer();
	
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	9f 90       	pop	r9
     3e2:	8f 90       	pop	r8
     3e4:	7f 90       	pop	r7
     3e6:	6f 90       	pop	r6
     3e8:	5f 90       	pop	r5
     3ea:	4f 90       	pop	r4
     3ec:	08 95       	ret

000003ee <ClearBuffer>:
		LCDWrite(LCD_D, screenBuffer[i]);
		
	}
}

void ClearBuffer(void) {
     3ee:	e9 e5       	ldi	r30, 0x59	; 89
     3f0:	f3 e0       	ldi	r31, 0x03	; 3
	
	char reset = 0;
	
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
	
		screenBuffer[i] &= reset;
     3f2:	11 92       	st	Z+, r1
	// Iterate through our buffer and set each byte to 0
	int i;
	
	char reset = 0;
	
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	e1 35       	cpi	r30, 0x51	; 81
     3f8:	f8 07       	cpc	r31, r24
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <ClearBuffer+0x4>
	
		screenBuffer[i] &= reset;
		
	}
}
     3fc:	08 95       	ret

000003fe <DrawFilledBox>:
	DrawLine(x1,y2,x2,y2);


}

void DrawFilledBox(unsigned char x1, unsigned char x2, unsigned char y1, unsigned char y2){
     3fe:	bf 92       	push	r11
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	b8 2e       	mov	r11, r24
     412:	c6 2e       	mov	r12, r22
     414:	d4 2e       	mov	r13, r20
     416:	c0 e0       	ldi	r28, 0x00	; 0
     418:	d0 e0       	ldi	r29, 0x00	; 0

	//distance between each y
	//int dy = y2-y1;
	
	int y;
	for(y = y1; y <= y2; y++){
     41a:	e4 2e       	mov	r14, r20
     41c:	ff 24       	eor	r15, r15
     41e:	02 2f       	mov	r16, r18
     420:	10 e0       	ldi	r17, 0x00	; 0
     422:	07 c0       	rjmp	.+14     	; 0x432 <DrawFilledBox+0x34>
     424:	2d 2d       	mov	r18, r13
     426:	2c 0f       	add	r18, r28
		
		DrawLine(x1,y,x2,y);
     428:	8b 2d       	mov	r24, r11
     42a:	62 2f       	mov	r22, r18
     42c:	4c 2d       	mov	r20, r12
     42e:	81 df       	rcall	.-254    	; 0x332 <DrawLine>
     430:	21 96       	adiw	r28, 0x01	; 1

	//distance between each y
	//int dy = y2-y1;
	
	int y;
	for(y = y1; y <= y2; y++){
     432:	ce 01       	movw	r24, r28
     434:	8e 0d       	add	r24, r14
     436:	9f 1d       	adc	r25, r15
     438:	08 17       	cp	r16, r24
     43a:	19 07       	cpc	r17, r25
     43c:	9c f7       	brge	.-26     	; 0x424 <DrawFilledBox+0x26>
		
		DrawLine(x1,y,x2,y);
	
	}
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	df 90       	pop	r13
     44c:	cf 90       	pop	r12
     44e:	bf 90       	pop	r11
     450:	08 95       	ret

00000452 <PresentBuffer>:
	}
	//PresentBuffer();
	
}

void PresentBuffer(void) {
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
	// Reset our position in the LCD RAM
	LCDPosition(0,0);
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	d9 d0       	rcall	.+434    	; 0x60e <LCDPosition>
     45c:	c9 e5       	ldi	r28, 0x59	; 89
     45e:	d3 e0       	ldi	r29, 0x03	; 3
	
	// Iterate through our buffer and write each byte to the LCD.
	int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
		
		LCDWrite(LCD_D, screenBuffer[i]);
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	69 91       	ld	r22, Y+
     464:	65 d0       	rcall	.+202    	; 0x530 <LCDWrite>
	// Reset our position in the LCD RAM
	LCDPosition(0,0);
	
	// Iterate through our buffer and write each byte to the LCD.
	int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
     466:	85 e0       	ldi	r24, 0x05	; 5
     468:	c1 35       	cpi	r28, 0x51	; 81
     46a:	d8 07       	cpc	r29, r24
     46c:	c9 f7       	brne	.-14     	; 0x460 <PresentBuffer+0xe>
		
		LCDWrite(LCD_D, screenBuffer[i]);
		
	}
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <ADCInitialise>:
										 // since it may be modified within an interrupt routine (ISR). Volatile just means that
										 // the value might change 'by itself' and tells the compiler not to make certain assumptions.

// Initialise the ADC registers
void ADCInitialise(unsigned char mux, unsigned char interrupt) {
	_interrupt = interrupt; // Store whether we are using interrupts or not 
     474:	60 93 4c 03 	sts	0x034C, r22
							// so we can read the results of either from the ADCRead function
	
    ADCSRB = (1 << ADHSM) | (mux & 0x20); // Configure high speed mode conversions
     478:	98 2f       	mov	r25, r24
     47a:	90 72       	andi	r25, 0x20	; 32
     47c:	90 68       	ori	r25, 0x80	; 128
     47e:	90 93 7b 00 	sts	0x007B, r25
    ADMUX = ADC_REF_POWER | (mux & 0x1F); // Configure the input ADC pin we want
     482:	8f 71       	andi	r24, 0x1F	; 31
     484:	80 64       	ori	r24, 0x40	; 64
     486:	80 93 7c 00 	sts	0x007C, r24
	
	ADCSRA = (1 << ADEN) | ADC_PRESCALER; // Enable the ADC and configure the prescaler (conversion speed)
     48a:	86 e8       	ldi	r24, 0x86	; 134
     48c:	80 93 7a 00 	sts	0x007A, r24
	
	if(_interrupt) {
     490:	66 23       	and	r22, r22
     492:	39 f0       	breq	.+14     	; 0x4a2 <ADCInitialise+0x2e>
		//not too sure about this
		ADCSRA ^= (1<<ADIE) | (1<<ADSC); // Enable the ADC interrupts and begin conversions
     494:	80 91 7a 00 	lds	r24, 0x007A
     498:	98 e4       	ldi	r25, 0x48	; 72
     49a:	89 27       	eor	r24, r25
     49c:	80 93 7a 00 	sts	0x007A, r24
		sei(); // Enable global interrupts, otherwise our ISR will never be called
     4a0:	78 94       	sei
     4a2:	08 95       	ret

000004a4 <ADCRead>:

// Read the ADC conversion value. This function returns a short since our ADC is 10 bit (0-1023) 
// which doesn't fit in an 8 bit character.
short ADCRead(void)
{
	if(!_interrupt) {
     4a4:	80 91 4c 03 	lds	r24, 0x034C
     4a8:	88 23       	and	r24, r24
     4aa:	91 f4       	brne	.+36     	; 0x4d0 <ADCRead+0x2c>
		ADCSRA ^= (1<<ADSC); // Start the conversion
     4ac:	80 91 7a 00 	lds	r24, 0x007A
     4b0:	90 e4       	ldi	r25, 0x40	; 64
     4b2:	89 27       	eor	r24, r25
     4b4:	80 93 7a 00 	sts	0x007A, r24
		
		//could possible use ADIF when not equal to it
		while (ADCSRA & (1<<ADSC)); // Waste time until conversion is finished
     4b8:	80 91 7a 00 	lds	r24, 0x007A
     4bc:	86 fd       	sbrc	r24, 6
     4be:	fc cf       	rjmp	.-8      	; 0x4b8 <ADCRead+0x14>
	
		// Read the low byte
		low = ADCL;
     4c0:	80 91 78 00 	lds	r24, 0x0078
     4c4:	80 93 4d 03 	sts	0x034D, r24
		// Read the high byte
		high = ADCH;
     4c8:	80 91 79 00 	lds	r24, 0x0079
     4cc:	80 93 4e 03 	sts	0x034E, r24
	}		
	
    return (high << 8) | low;
     4d0:	40 91 4e 03 	lds	r20, 0x034E
     4d4:	20 91 4d 03 	lds	r18, 0x034D
     4d8:	94 2f       	mov	r25, r20
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	28 2b       	or	r18, r24
     4e0:	39 2b       	or	r19, r25
}
     4e2:	c9 01       	movw	r24, r18
     4e4:	08 95       	ret

000004e6 <__vector_29>:

// Our interrupt routine, this is automatically called whenever the ADC interrupt is triggered
ISR(ADC_vect) {
     4e6:	1f 92       	push	r1
     4e8:	0f 92       	push	r0
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	0f 92       	push	r0
     4ee:	11 24       	eor	r1, r1
     4f0:	8f 93       	push	r24
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	// Read the low byte
	low = ADCL;
     4f6:	80 91 78 00 	lds	r24, 0x0078
     4fa:	80 93 4d 03 	sts	0x034D, r24
	// Read the high byte
	high = ADCH;
     4fe:	80 91 79 00 	lds	r24, 0x0079
     502:	80 93 4e 03 	sts	0x034E, r24
	ADCSRA |= (1<<ADSC); 
     506:	ea e7       	ldi	r30, 0x7A	; 122
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	80 64       	ori	r24, 0x40	; 64
     50e:	80 83       	st	Z, r24
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	8f 91       	pop	r24
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <SPIInit>:
#include "ASCIIFont.h"

void SPIInit(void) {
	
	// Set MOSI and SCK as outputs for the SPI module
	SET_OUTPUT(DDRB, MOSIPIN);
     520:	22 9a       	sbi	0x04, 2	; 4
	SET_OUTPUT(DDRB, SCKPIN);
     522:	21 9a       	sbi	0x04, 1	; 4
	SET_OUTPUT(DDRB, SCEPIN);
     524:	20 9a       	sbi	0x04, 0	; 4
	
	// Enable SPI in Master mode, leave the clock speed as fclk/4 (Refer to datasheet for SPCR register)
	/* Code here */
	
	//set all of port b
	DDRB = 0xFF;
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	84 b9       	out	0x04, r24	; 4
	//leaving SP12X SPR1 SPRO should default to zeroes 0 0 0 - fclk/4
	SPCR =(1<<SPE)|(1<<MSTR);
     52a:	80 e5       	ldi	r24, 0x50	; 80
     52c:	8c bd       	out	0x2c, r24	; 44
}
     52e:	08 95       	ret

00000530 <LCDWrite>:
	// Remove this line
	// #error You need to complete the LCD Write Function
	
	// Set the DC pin based on the parameter 'dc' (Hint: use the OUTPUT_WRITE macro)
	/* Code here */
	OUTPUT_WRITE(PORTB,DCPIN,dc);
     530:	95 b1       	in	r25, 0x05	; 5
     532:	87 95       	ror	r24
     534:	88 27       	eor	r24, r24
     536:	87 95       	ror	r24
     538:	9f 77       	andi	r25, 0x7F	; 127
     53a:	98 2b       	or	r25, r24
     53c:	95 b9       	out	0x05, r25	; 5
	
	
	// Pull the SCE/SS pin low to signal the LCD we have data
	/* Code here */
	OUTPUT_LOW(PORTB, SCEPIN);
     53e:	28 98       	cbi	0x05, 0	; 5

void SPIWriteByte(unsigned char byte) {
	
	// Write our byte to the SPI data register
	/* Code here */
	SPDR = byte;
     540:	6e bd       	out	0x2e, r22	; 46
	
	// Wait until the SPI module signals that transmission is finished
	while(!(SPSR & (1<<SPIF)));
     542:	0d b4       	in	r0, 0x2d	; 45
     544:	07 fe       	sbrs	r0, 7
     546:	fd cf       	rjmp	.-6      	; 0x542 <LCDWrite+0x12>
	/* Code here */
	SPIWriteByte(data);
	
	// Pull SCE/SS high to signal the LCD we are done
	/* Code here */
	OUTPUT_HIGH(PORTB, SCEPIN);
     548:	28 9a       	sbi	0x05, 0	; 5
}
     54a:	08 95       	ret

0000054c <LCDInitialise>:

// Initialise the LCD with our desired settings
void LCDInitialise(unsigned char contrast) {
     54c:	1f 93       	push	r17
     54e:	18 2f       	mov	r17, r24
	SPIInit();
     550:	e7 df       	rcall	.-50     	; 0x520 <SPIInit>
	
	SET_OUTPUT(DDRB, DCPIN);
     552:	27 9a       	sbi	0x04, 7	; 4
	SET_OUTPUT(DDRB, RSTPIN);
     554:	23 9a       	sbi	0x04, 3	; 4
  
	OUTPUT_LOW(PORTB, RSTPIN);
     556:	2b 98       	cbi	0x05, 3	; 5
	OUTPUT_HIGH(PORTB, RSTPIN);
     558:	2b 9a       	sbi	0x05, 3	; 5
  
	LCDWrite(LCD_C, 0x21 ); // Enable LCD extended command set
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	61 e2       	ldi	r22, 0x21	; 33
     55e:	e8 df       	rcall	.-48     	; 0x530 <LCDWrite>
	LCDWrite(LCD_C, 0x80 | contrast ); // Set LCD Vop (Contrast)
     560:	10 68       	ori	r17, 0x80	; 128
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	61 2f       	mov	r22, r17
     566:	e4 df       	rcall	.-56     	; 0x530 <LCDWrite>
	LCDWrite(LCD_C, 0x13 ); // LCD bias mode 1:48
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	63 e1       	ldi	r22, 0x13	; 19
     56c:	e1 df       	rcall	.-62     	; 0x530 <LCDWrite>
  
	LCDWrite(LCD_C, 0x20 ); // Enable LCD basic command set
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	60 e2       	ldi	r22, 0x20	; 32
     572:	de df       	rcall	.-68     	; 0x530 <LCDWrite>
	LCDWrite(LCD_C, 0x0C ); // LCD in normal mode.
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	6c e0       	ldi	r22, 0x0C	; 12
     578:	db df       	rcall	.-74     	; 0x530 <LCDWrite>
  
	LCDWrite(LCD_C, 0x40 ); // Reset row to 0
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	60 e4       	ldi	r22, 0x40	; 64
     57e:	d8 df       	rcall	.-80     	; 0x530 <LCDWrite>
	LCDWrite(LCD_C, 0x80 ); // Reset column to 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	60 e8       	ldi	r22, 0x80	; 128
     584:	d5 df       	rcall	.-86     	; 0x530 <LCDWrite>
}
     586:	1f 91       	pop	r17
     588:	08 95       	ret

0000058a <LCDClear>:

// Simply blank out the memory of the LCD to clear the screen
void LCDClear(void) {
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	c0 e0       	ldi	r28, 0x00	; 0
     590:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < LCD_X * LCD_Y / 8; i++) {
		LCDWrite(LCD_D, 0x00);
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	cc df       	rcall	.-104    	; 0x530 <LCDWrite>
	LCDWrite(LCD_C, 0x80 ); // Reset column to 0
}

// Simply blank out the memory of the LCD to clear the screen
void LCDClear(void) {
	for (int i = 0; i < LCD_X * LCD_Y / 8; i++) {
     598:	21 96       	adiw	r28, 0x01	; 1
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	c8 3f       	cpi	r28, 0xF8	; 248
     59e:	d8 07       	cpc	r29, r24
     5a0:	c1 f7       	brne	.-16     	; 0x592 <LCDClear+0x8>
		LCDWrite(LCD_D, 0x00);
	}
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <LCDCharacter>:

void LCDCharacter(unsigned char character) {
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	18 2f       	mov	r17, r24
	/*
		Blank pixel column before the character, to increase readability
		Also, our font is only 5 pixels wide, since our LCD is 84 pixels wide
		we can fit twelve 7 pixel wide characters across.
	*/
	LCDWrite(LCD_D, 0x00);
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	bc df       	rcall	.-136    	; 0x530 <LCDWrite>
     5b8:	81 2f       	mov	r24, r17
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	80 97       	sbiw	r24, 0x20	; 32
     5be:	ec 01       	movw	r28, r24
     5c0:	cc 0f       	add	r28, r28
     5c2:	dd 1f       	adc	r29, r29
     5c4:	cc 0f       	add	r28, r28
     5c6:	dd 1f       	adc	r29, r29
     5c8:	c8 0f       	add	r28, r24
     5ca:	d9 1f       	adc	r29, r25
     5cc:	cb 5c       	subi	r28, 0xCB	; 203
     5ce:	de 4f       	sbci	r29, 0xFE	; 254
	
	for (int index = 0; index < 5; index++) {
     5d0:	85 e0       	ldi	r24, 0x05	; 5
     5d2:	18 9f       	mul	r17, r24
     5d4:	80 01       	movw	r16, r0
     5d6:	11 24       	eor	r1, r1
     5d8:	06 56       	subi	r16, 0x66	; 102
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
		// Write each of the 5 pixel rows to the LCD, we subtract 0x20 since
		// our table doesn't have the unprintable ASCII characters (...)
		LCDWrite(LCD_D, ASCII[character - 0x20][index]);
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	69 91       	ld	r22, Y+
     5e0:	a7 df       	rcall	.-178    	; 0x530 <LCDWrite>
		Also, our font is only 5 pixels wide, since our LCD is 84 pixels wide
		we can fit twelve 7 pixel wide characters across.
	*/
	LCDWrite(LCD_D, 0x00);
	
	for (int index = 0; index < 5; index++) {
     5e2:	c0 17       	cp	r28, r16
     5e4:	d1 07       	cpc	r29, r17
     5e6:	d1 f7       	brne	.-12     	; 0x5dc <LCDCharacter+0x34>
		// Write each of the 5 pixel rows to the LCD, we subtract 0x20 since
		// our table doesn't have the unprintable ASCII characters (...)
		LCDWrite(LCD_D, ASCII[character - 0x20][index]);
	}
	
	LCDWrite(LCD_D, 0x00);
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	a1 df       	rcall	.-190    	; 0x530 <LCDWrite>
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <LCDString>:

// Iterate over the string, sending each character one at a time
void LCDString(unsigned char *characters) {
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ec 01       	movw	r28, r24
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <LCDString+0xa>
	// Your code goes here...
	int index = 0;
	
	while(characters[index] != 0x00){
		
		LCDCharacter(characters[index]);
     600:	d3 df       	rcall	.-90     	; 0x5a8 <LCDCharacter>
// Iterate over the string, sending each character one at a time
void LCDString(unsigned char *characters) {
	// Your code goes here...
	int index = 0;
	
	while(characters[index] != 0x00){
     602:	89 91       	ld	r24, Y+
     604:	88 23       	and	r24, r24
     606:	e1 f7       	brne	.-8      	; 0x600 <LCDString+0x8>
		LCDCharacter(characters[index]);
		index++;
	
	}
	
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <LCDPosition>:

// Set the position in the LCD's memory that we want to begin writing from
void LCDPosition(unsigned char x, unsigned char y) {
     60e:	1f 93       	push	r17
     610:	98 2f       	mov	r25, r24
     612:	16 2f       	mov	r17, r22
	//used to set the command byte correctly
	char setX = 128;
	char setY = 64;
	
	//validate x and y
	if((x >= 0) && (x < 84) && (y >= 0) && (y < 6)){
     614:	84 35       	cpi	r24, 0x54	; 84
     616:	50 f4       	brcc	.+20     	; 0x62c <LCDPosition+0x1e>
     618:	66 30       	cpi	r22, 0x06	; 6
     61a:	40 f4       	brcc	.+16     	; 0x62c <LCDPosition+0x1e>
		//set the command bytes
		setX = setX | x;
		setY = setY | y;
		
		//set the position if is in the correct range, send commands
		LCDWrite(LCD_C, setX);
     61c:	90 68       	ori	r25, 0x80	; 128
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	69 2f       	mov	r22, r25
     622:	86 df       	rcall	.-244    	; 0x530 <LCDWrite>
		LCDWrite(LCD_C, setY);
     624:	10 64       	ori	r17, 0x40	; 64
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	61 2f       	mov	r22, r17
     62a:	82 df       	rcall	.-252    	; 0x530 <LCDWrite>
		
		//....do nothing
	
	}
	
}
     62c:	1f 91       	pop	r17
     62e:	08 95       	ret

00000630 <initPositions>:

void initPositions(){
	
	paddleOne[0] = 0;
     630:	10 92 84 05 	sts	0x0584, r1
     634:	10 92 83 05 	sts	0x0583, r1
	paddleOne[1] = 16;
     638:	40 e1       	ldi	r20, 0x10	; 16
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	50 93 86 05 	sts	0x0586, r21
     640:	40 93 85 05 	sts	0x0585, r20
	paddleOne[2] = 1;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	90 93 88 05 	sts	0x0588, r25
     64c:	80 93 87 05 	sts	0x0587, r24
	paddleOne[3] = 30;
     650:	2e e1       	ldi	r18, 0x1E	; 30
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	30 93 8a 05 	sts	0x058A, r19
     658:	20 93 89 05 	sts	0x0589, r18

	paddleOneMovement = 0;
     65c:	10 92 8c 05 	sts	0x058C, r1
     660:	10 92 8b 05 	sts	0x058B, r1
	
	paddleTwo[0] = 82;
     664:	82 e5       	ldi	r24, 0x52	; 82
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	90 93 a0 05 	sts	0x05A0, r25
     66c:	80 93 9f 05 	sts	0x059F, r24
	paddleTwo[1] = 16;
     670:	50 93 a2 05 	sts	0x05A2, r21
     674:	40 93 a1 05 	sts	0x05A1, r20
	paddleTwo[2] = 83;
     678:	83 e5       	ldi	r24, 0x53	; 83
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	90 93 a4 05 	sts	0x05A4, r25
     680:	80 93 a3 05 	sts	0x05A3, r24
	paddleTwo[3] = 30;
     684:	30 93 a6 05 	sts	0x05A6, r19
     688:	20 93 a5 05 	sts	0x05A5, r18
	
	ballPos[0] = 40;
     68c:	88 e2       	ldi	r24, 0x28	; 40
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	90 93 96 05 	sts	0x0596, r25
     694:	80 93 95 05 	sts	0x0595, r24
	ballPos[1] = 22;
     698:	46 e1       	ldi	r20, 0x16	; 22
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	50 93 98 05 	sts	0x0598, r21
     6a0:	40 93 97 05 	sts	0x0597, r20
	ballPos[2] = 42;
     6a4:	8a e2       	ldi	r24, 0x2A	; 42
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	90 93 9a 05 	sts	0x059A, r25
     6ac:	80 93 99 05 	sts	0x0599, r24
	ballPos[3] = 24;
     6b0:	28 e1       	ldi	r18, 0x18	; 24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	30 93 9c 05 	sts	0x059C, r19
     6b8:	20 93 9b 05 	sts	0x059B, r18
	
	currentAngle = 0;
     6bc:	10 92 b8 05 	sts	0x05B8, r1
     6c0:	10 92 b7 05 	sts	0x05B7, r1
	
	nextBallPos[0] = ballPos[0] - 1;
     6c4:	87 e2       	ldi	r24, 0x27	; 39
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	90 93 ac 05 	sts	0x05AC, r25
     6cc:	80 93 ab 05 	sts	0x05AB, r24
	nextBallPos[1] = ballPos[1] - 0;
     6d0:	50 93 ae 05 	sts	0x05AE, r21
     6d4:	40 93 ad 05 	sts	0x05AD, r20
	nextBallPos[2] = ballPos[2] - 1;
     6d8:	89 e2       	ldi	r24, 0x29	; 41
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	90 93 b0 05 	sts	0x05B0, r25
     6e0:	80 93 af 05 	sts	0x05AF, r24
	nextBallPos[3] = ballPos[3] - 0;
     6e4:	30 93 b2 05 	sts	0x05B2, r19
     6e8:	20 93 b1 05 	sts	0x05B1, r18

	//Speed tracking
	ballAngleSpeed = 0;
     6ec:	10 92 ba 05 	sts	0x05BA, r1
     6f0:	10 92 b9 05 	sts	0x05B9, r1
	adjustableSpeed = 0;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	80 93 8d 05 	sts	0x058D, r24
     700:	90 93 8e 05 	sts	0x058E, r25
     704:	a0 93 8f 05 	sts	0x058F, r26
     708:	b0 93 90 05 	sts	0x0590, r27

	collision = 0;
     70c:	10 92 52 05 	sts	0x0552, r1
     710:	10 92 51 05 	sts	0x0551, r1
}
     714:	08 95       	ret

00000716 <initBallDirection>:

void initBallDirection(){
	
	movementIn[0] = 1;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	90 93 54 05 	sts	0x0554, r25
     71e:	80 93 53 05 	sts	0x0553, r24
	movementIn[1] = 0;
     722:	10 92 56 05 	sts	0x0556, r1
     726:	10 92 55 05 	sts	0x0555, r1
	currentMovementIn[0] = 0;
     72a:	10 92 b4 05 	sts	0x05B4, r1
     72e:	10 92 b3 05 	sts	0x05B3, r1
	currentMovementIn[1] = 0;
     732:	10 92 b6 05 	sts	0x05B6, r1
     736:	10 92 b5 05 	sts	0x05B5, r1

	
	ballDirection[0] = -1;
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	9f ef       	ldi	r25, 0xFF	; 255
     73e:	90 93 a8 05 	sts	0x05A8, r25
     742:	80 93 a7 05 	sts	0x05A7, r24
	ballDirection[1] = 0;
     746:	10 92 aa 05 	sts	0x05AA, r1
     74a:	10 92 a9 05 	sts	0x05A9, r1
}
     74e:	08 95       	ret

00000750 <GameOverScreen>:
	ClearBuffer();
	WinMessage();
	GameOverScreen();
}

void GameOverScreen(){
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e9       	ldi	r20, 0x90	; 144
     756:	51 e0       	ldi	r21, 0x01	; 1
     758:	22 c0       	rjmp	.+68     	; 0x79e <GameOverScreen+0x4e>
     75a:	fa 01       	movw	r30, r20
     75c:	31 97       	sbiw	r30, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <GameOverScreen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     760:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     762:	d9 f7       	brne	.-10     	; 0x75a <GameOverScreen+0xa>

	while(state != 2) {
		
		_delay_ms(250);
		
		if(!(PIND & (1 << PD1)) && !(PIND & (1 << PD2))){
     764:	49 99       	sbic	0x09, 1	; 9
     766:	02 c0       	rjmp	.+4      	; 0x76c <GameOverScreen+0x1c>
     768:	4a 9b       	sbis	0x09, 2	; 9
     76a:	03 c0       	rjmp	.+6      	; 0x772 <GameOverScreen+0x22>

			state = 1;

		}

		if((state == 1) && ((PIND & (1 << PD1)) && (PIND & (1 << PD2)))){
     76c:	21 30       	cpi	r18, 0x01	; 1
     76e:	31 05       	cpc	r19, r1
     770:	49 f4       	brne	.+18     	; 0x784 <GameOverScreen+0x34>
     772:	49 9b       	sbis	0x09, 1	; 9
     774:	05 c0       	rjmp	.+10     	; 0x780 <GameOverScreen+0x30>
     776:	4a 9b       	sbis	0x09, 2	; 9
     778:	03 c0       	rjmp	.+6      	; 0x780 <GameOverScreen+0x30>
     77a:	22 e0       	ldi	r18, 0x02	; 2
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	02 c0       	rjmp	.+4      	; 0x784 <GameOverScreen+0x34>
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0

			state = 2;
		}

		
		PORTF ^= (1<<PF7);
     784:	81 b3       	in	r24, 0x11	; 17
     786:	80 58       	subi	r24, 0x80	; 128
     788:	81 bb       	out	0x11, r24	; 17
     78a:	84 ec       	ldi	r24, 0xC4	; 196
     78c:	99 e0       	ldi	r25, 0x09	; 9
     78e:	fa 01       	movw	r30, r20
     790:	31 97       	sbiw	r30, 0x01	; 1
     792:	f1 f7       	brne	.-4      	; 0x790 <GameOverScreen+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     794:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     796:	d9 f7       	brne	.-10     	; 0x78e <GameOverScreen+0x3e>

void GameOverScreen(){
	
	int state = 0;

	while(state != 2) {
     798:	22 30       	cpi	r18, 0x02	; 2
     79a:	31 05       	cpc	r19, r1
     79c:	19 f0       	breq	.+6      	; 0x7a4 <GameOverScreen+0x54>
     79e:	84 ec       	ldi	r24, 0xC4	; 196
     7a0:	99 e0       	ldi	r25, 0x09	; 9
     7a2:	db cf       	rjmp	.-74     	; 0x75a <GameOverScreen+0xa>
		PORTF ^= (1<<PF7);
		_delay_ms(250);

	}
	
	PORTF &= ~(1<<PF7);
     7a4:	8f 98       	cbi	0x11, 7	; 17
	
}
     7a6:	08 95       	ret

000007a8 <UpdatePaddleOne>:
}

//updates the padle coords
void UpdatePaddleOne(){
	
	int boundaryCaseOne = TOPWALL;
     7a8:	60 91 51 03 	lds	r22, 0x0351
     7ac:	70 91 52 03 	lds	r23, 0x0352
	int boundaryCaseTwo = BOTTOMWALL;
     7b0:	40 91 2e 03 	lds	r20, 0x032E
     7b4:	50 91 2f 03 	lds	r21, 0x032F
	//keeps track of the indexes for either x or y depending on game
	int coordOne = 1;
	int coordTwo = 3;
	
	//breakout
	if(currentGame == 2){
     7b8:	80 91 bb 05 	lds	r24, 0x05BB
     7bc:	90 91 bc 05 	lds	r25, 0x05BC
     7c0:	02 97       	sbiw	r24, 0x02	; 2
     7c2:	29 f0       	breq	.+10     	; 0x7ce <UpdatePaddleOne+0x26>
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	e1 e0       	ldi	r30, 0x01	; 1
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	17 c0       	rjmp	.+46     	; 0x7fc <UpdatePaddleOne+0x54>
		boundaryCaseOne = LEFTWALL;
     7ce:	60 91 53 03 	lds	r22, 0x0353
     7d2:	70 91 54 03 	lds	r23, 0x0354
		boundaryCaseTwo = RIGHTWALL;
     7d6:	40 91 30 03 	lds	r20, 0x0330
     7da:	50 91 31 03 	lds	r21, 0x0331
		coordOne = 0;//x1
		coordTwo = 2;//x2
		
		//need to invert movement
		paddleOneMovement = paddleOneMovement * -1;
     7de:	80 91 8b 05 	lds	r24, 0x058B
     7e2:	90 91 8c 05 	lds	r25, 0x058C
     7e6:	90 95       	com	r25
     7e8:	81 95       	neg	r24
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	90 93 8c 05 	sts	0x058C, r25
     7f0:	80 93 8b 05 	sts	0x058B, r24
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	e0 e0       	ldi	r30, 0x00	; 0
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	//update paddle one coords
	if(paddleOneMovement == -1){
     7fc:	20 91 8b 05 	lds	r18, 0x058B
     800:	30 91 8c 05 	lds	r19, 0x058C
     804:	af ef       	ldi	r26, 0xFF	; 255
     806:	2f 3f       	cpi	r18, 0xFF	; 255
     808:	3a 07       	cpc	r19, r26
     80a:	c1 f4       	brne	.+48     	; 0x83c <UpdatePaddleOne+0x94>

		if(paddleOne[coordOne] > boundaryCaseOne){
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	ed 57       	subi	r30, 0x7D	; 125
     812:	fa 4f       	sbci	r31, 0xFA	; 250
     814:	20 81       	ld	r18, Z
     816:	31 81       	ldd	r19, Z+1	; 0x01
     818:	62 17       	cp	r22, r18
     81a:	73 07       	cpc	r23, r19
     81c:	64 f5       	brge	.+88     	; 0x876 <UpdatePaddleOne+0xce>
			paddleOne[coordOne] += paddleOneMovement;
     81e:	21 50       	subi	r18, 0x01	; 1
     820:	30 40       	sbci	r19, 0x00	; 0
     822:	31 83       	std	Z+1, r19	; 0x01
     824:	20 83       	st	Z, r18
			paddleOne[coordTwo] += paddleOneMovement;
     826:	fc 01       	movw	r30, r24
     828:	ee 0f       	add	r30, r30
     82a:	ff 1f       	adc	r31, r31
     82c:	ed 57       	subi	r30, 0x7D	; 125
     82e:	fa 4f       	sbci	r31, 0xFA	; 250
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	91 83       	std	Z+1, r25	; 0x01
     838:	80 83       	st	Z, r24
     83a:	1d c0       	rjmp	.+58     	; 0x876 <UpdatePaddleOne+0xce>
		}

	} else if(paddleOneMovement == 1){
     83c:	21 30       	cpi	r18, 0x01	; 1
     83e:	31 05       	cpc	r19, r1
     840:	d1 f4       	brne	.+52     	; 0x876 <UpdatePaddleOne+0xce>

		if(paddleOne[coordTwo] < boundaryCaseTwo){
     842:	dc 01       	movw	r26, r24
     844:	aa 0f       	add	r26, r26
     846:	bb 1f       	adc	r27, r27
     848:	ad 57       	subi	r26, 0x7D	; 125
     84a:	ba 4f       	sbci	r27, 0xFA	; 250
     84c:	8d 91       	ld	r24, X+
     84e:	9c 91       	ld	r25, X
     850:	11 97       	sbiw	r26, 0x01	; 1
     852:	84 17       	cp	r24, r20
     854:	95 07       	cpc	r25, r21
     856:	7c f4       	brge	.+30     	; 0x876 <UpdatePaddleOne+0xce>
			paddleOne[coordOne] += paddleOneMovement;
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ed 57       	subi	r30, 0x7D	; 125
     85e:	fa 4f       	sbci	r31, 0xFA	; 250
     860:	80 81       	ld	r24, Z
     862:	91 81       	ldd	r25, Z+1	; 0x01
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	80 83       	st	Z, r24
			paddleOne[coordTwo] += paddleOneMovement;
     86a:	8d 91       	ld	r24, X+
     86c:	9c 91       	ld	r25, X
     86e:	11 97       	sbiw	r26, 0x01	; 1
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	8d 93       	st	X+, r24
     874:	9c 93       	st	X, r25
		}
	}
	
	paddleOneMovement = 0;
     876:	10 92 8c 05 	sts	0x058C, r1
     87a:	10 92 8b 05 	sts	0x058B, r1
	
}
     87e:	08 95       	ret

00000880 <UpdatePaddleTwo>:

void UpdatePaddleTwo(){

	//update paddle two coords
	if(ballPos[1] > (paddleTwo[1] + 7)){
     880:	40 91 97 05 	lds	r20, 0x0597
     884:	50 91 98 05 	lds	r21, 0x0598
     888:	20 91 a1 05 	lds	r18, 0x05A1
     88c:	30 91 a2 05 	lds	r19, 0x05A2
     890:	c9 01       	movw	r24, r18
     892:	07 96       	adiw	r24, 0x07	; 7
     894:	84 17       	cp	r24, r20
     896:	95 07       	cpc	r25, r21
     898:	c4 f4       	brge	.+48     	; 0x8ca <UpdatePaddleTwo+0x4a>

		if(paddleTwo[3] < BOTTOMWALL){
     89a:	40 91 a5 05 	lds	r20, 0x05A5
     89e:	50 91 a6 05 	lds	r21, 0x05A6
     8a2:	80 91 2e 03 	lds	r24, 0x032E
     8a6:	90 91 2f 03 	lds	r25, 0x032F
     8aa:	48 17       	cp	r20, r24
     8ac:	59 07       	cpc	r21, r25
     8ae:	44 f5       	brge	.+80     	; 0x900 <UpdatePaddleTwo+0x80>

			//move down
			paddleTwo[1] += 1;
     8b0:	2f 5f       	subi	r18, 0xFF	; 255
     8b2:	3f 4f       	sbci	r19, 0xFF	; 255
     8b4:	30 93 a2 05 	sts	0x05A2, r19
     8b8:	20 93 a1 05 	sts	0x05A1, r18
			paddleTwo[3] += 1;
     8bc:	4f 5f       	subi	r20, 0xFF	; 255
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	50 93 a6 05 	sts	0x05A6, r21
     8c4:	40 93 a5 05 	sts	0x05A5, r20
     8c8:	08 95       	ret
		}

	} else if (ballPos[1] < (paddleTwo[1] + 7)){
     8ca:	c9 01       	movw	r24, r18
     8cc:	06 96       	adiw	r24, 0x06	; 6
     8ce:	84 17       	cp	r24, r20
     8d0:	95 07       	cpc	r25, r21
     8d2:	b4 f0       	brlt	.+44     	; 0x900 <UpdatePaddleTwo+0x80>

		if(paddleTwo[1] > TOPWALL){
     8d4:	80 91 51 03 	lds	r24, 0x0351
     8d8:	90 91 52 03 	lds	r25, 0x0352
     8dc:	82 17       	cp	r24, r18
     8de:	93 07       	cpc	r25, r19
     8e0:	7c f4       	brge	.+30     	; 0x900 <UpdatePaddleTwo+0x80>

			//move up
			paddleTwo[1] += -1;
     8e2:	21 50       	subi	r18, 0x01	; 1
     8e4:	30 40       	sbci	r19, 0x00	; 0
     8e6:	30 93 a2 05 	sts	0x05A2, r19
     8ea:	20 93 a1 05 	sts	0x05A1, r18
			paddleTwo[3] += -1;
     8ee:	80 91 a5 05 	lds	r24, 0x05A5
     8f2:	90 91 a6 05 	lds	r25, 0x05A6
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	90 93 a6 05 	sts	0x05A6, r25
     8fc:	80 93 a5 05 	sts	0x05A5, r24
     900:	08 95       	ret

00000902 <PongCollisions>:
}

void PongCollisions(){

//For top
	if(ballPos[1] == TOPWALL){
     902:	20 91 97 05 	lds	r18, 0x0597
     906:	30 91 98 05 	lds	r19, 0x0598
     90a:	80 91 51 03 	lds	r24, 0x0351
     90e:	90 91 52 03 	lds	r25, 0x0352
     912:	28 17       	cp	r18, r24
     914:	39 07       	cpc	r19, r25
     916:	19 f4       	brne	.+6      	; 0x91e <PongCollisions+0x1c>

		collision = 3;
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0d c0       	rjmp	.+26     	; 0x938 <PongCollisions+0x36>

	} else if (ballPos[3] == BOTTOMWALL){//For Bottom
     91e:	20 91 9b 05 	lds	r18, 0x059B
     922:	30 91 9c 05 	lds	r19, 0x059C
     926:	80 91 2e 03 	lds	r24, 0x032E
     92a:	90 91 2f 03 	lds	r25, 0x032F
     92e:	28 17       	cp	r18, r24
     930:	39 07       	cpc	r19, r25
     932:	39 f4       	brne	.+14     	; 0x942 <PongCollisions+0x40>

		collision = 4;
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	90 93 52 05 	sts	0x0552, r25
     93c:	80 93 51 05 	sts	0x0551, r24
     940:	08 95       	ret
	
	}else if((nextBallPos[0] <= paddleOne[2]) && 
     942:	60 91 ab 05 	lds	r22, 0x05AB
     946:	70 91 ac 05 	lds	r23, 0x05AC
     94a:	80 91 87 05 	lds	r24, 0x0587
     94e:	90 91 88 05 	lds	r25, 0x0588
     952:	86 17       	cp	r24, r22
     954:	97 07       	cpc	r25, r23
     956:	cc f0       	brlt	.+50     	; 0x98a <PongCollisions+0x88>
     958:	20 91 b1 05 	lds	r18, 0x05B1
     95c:	30 91 b2 05 	lds	r19, 0x05B2
     960:	80 91 85 05 	lds	r24, 0x0585
     964:	90 91 86 05 	lds	r25, 0x0586
     968:	28 17       	cp	r18, r24
     96a:	39 07       	cpc	r19, r25
     96c:	74 f0       	brlt	.+28     	; 0x98a <PongCollisions+0x88>
     96e:	20 91 ad 05 	lds	r18, 0x05AD
     972:	30 91 ae 05 	lds	r19, 0x05AE
     976:	80 91 89 05 	lds	r24, 0x0589
     97a:	90 91 8a 05 	lds	r25, 0x058A
     97e:	82 17       	cp	r24, r18
     980:	93 07       	cpc	r25, r19
     982:	1c f0       	brlt	.+6      	; 0x98a <PongCollisions+0x88>
		((nextBallPos[3] >= paddleOne[1])&&(nextBallPos[1] <= paddleOne[3]))){

		collision = 1;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	d7 cf       	rjmp	.-82     	; 0x938 <PongCollisions+0x36>

	} else if ((nextBallPos[2] >= paddleTwo[0]) && 
     98a:	40 91 af 05 	lds	r20, 0x05AF
     98e:	50 91 b0 05 	lds	r21, 0x05B0
     992:	80 91 9f 05 	lds	r24, 0x059F
     996:	90 91 a0 05 	lds	r25, 0x05A0
     99a:	48 17       	cp	r20, r24
     99c:	59 07       	cpc	r21, r25
     99e:	cc f0       	brlt	.+50     	; 0x9d2 <PongCollisions+0xd0>
     9a0:	20 91 b1 05 	lds	r18, 0x05B1
     9a4:	30 91 b2 05 	lds	r19, 0x05B2
     9a8:	80 91 a1 05 	lds	r24, 0x05A1
     9ac:	90 91 a2 05 	lds	r25, 0x05A2
     9b0:	28 17       	cp	r18, r24
     9b2:	39 07       	cpc	r19, r25
     9b4:	74 f0       	brlt	.+28     	; 0x9d2 <PongCollisions+0xd0>
     9b6:	20 91 ad 05 	lds	r18, 0x05AD
     9ba:	30 91 ae 05 	lds	r19, 0x05AE
     9be:	80 91 a5 05 	lds	r24, 0x05A5
     9c2:	90 91 a6 05 	lds	r25, 0x05A6
     9c6:	82 17       	cp	r24, r18
     9c8:	93 07       	cpc	r25, r19
     9ca:	1c f0       	brlt	.+6      	; 0x9d2 <PongCollisions+0xd0>
		((nextBallPos[3] >= paddleTwo[1])&&(nextBallPos[1] <= paddleTwo[3]))){

		collision = 2;
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	b3 cf       	rjmp	.-154    	; 0x938 <PongCollisions+0x36>

	} else if ((nextBallPos[2] >= RIGHTWALL) && 
     9d2:	80 91 30 03 	lds	r24, 0x0330
     9d6:	90 91 31 03 	lds	r25, 0x0331
     9da:	48 17       	cp	r20, r24
     9dc:	59 07       	cpc	r21, r25
     9de:	1c f1       	brlt	.+70     	; 0xa26 <PongCollisions+0x124>
     9e0:	20 91 b1 05 	lds	r18, 0x05B1
     9e4:	30 91 b2 05 	lds	r19, 0x05B2
     9e8:	80 91 a1 05 	lds	r24, 0x05A1
     9ec:	90 91 a2 05 	lds	r25, 0x05A2
     9f0:	28 17       	cp	r18, r24
     9f2:	39 07       	cpc	r19, r25
     9f4:	5c f0       	brlt	.+22     	; 0xa0c <PongCollisions+0x10a>
     9f6:	20 91 ad 05 	lds	r18, 0x05AD
     9fa:	30 91 ae 05 	lds	r19, 0x05AE
     9fe:	80 91 a5 05 	lds	r24, 0x05A5
     a02:	90 91 a6 05 	lds	r25, 0x05A6
     a06:	82 17       	cp	r24, r18
     a08:	93 07       	cpc	r25, r19
     a0a:	6c f4       	brge	.+26     	; 0xa26 <PongCollisions+0x124>
		((nextBallPos[3] < paddleTwo[1])||(nextBallPos[1] > paddleTwo[3]))) {
		collision = 5;
     a0c:	85 e0       	ldi	r24, 0x05	; 5
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	90 93 52 05 	sts	0x0552, r25
     a14:	80 93 51 05 	sts	0x0551, r24
		gameWinner = 1;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	90 93 58 05 	sts	0x0558, r25
     a20:	80 93 57 05 	sts	0x0557, r24
     a24:	08 95       	ret

	} else if ((nextBallPos[0] <= LEFTWALL) && //For Walls Behind Players
     a26:	80 91 53 03 	lds	r24, 0x0353
     a2a:	90 91 54 03 	lds	r25, 0x0354
     a2e:	86 17       	cp	r24, r22
     a30:	97 07       	cpc	r25, r23
     a32:	14 f1       	brlt	.+68     	; 0xa78 <PongCollisions+0x176>
     a34:	20 91 b1 05 	lds	r18, 0x05B1
     a38:	30 91 b2 05 	lds	r19, 0x05B2
     a3c:	80 91 85 05 	lds	r24, 0x0585
     a40:	90 91 86 05 	lds	r25, 0x0586
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	5c f0       	brlt	.+22     	; 0xa60 <PongCollisions+0x15e>
     a4a:	20 91 ad 05 	lds	r18, 0x05AD
     a4e:	30 91 ae 05 	lds	r19, 0x05AE
     a52:	80 91 89 05 	lds	r24, 0x0589
     a56:	90 91 8a 05 	lds	r25, 0x058A
     a5a:	82 17       	cp	r24, r18
     a5c:	93 07       	cpc	r25, r19
     a5e:	64 f4       	brge	.+24     	; 0xa78 <PongCollisions+0x176>
		((nextBallPos[3] < paddleOne[1])||(nextBallPos[1] > paddleOne[3]))){
		collision = 5;
     a60:	85 e0       	ldi	r24, 0x05	; 5
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 52 05 	sts	0x0552, r25
     a68:	80 93 51 05 	sts	0x0551, r24
		gameWinner = 2;
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	90 93 58 05 	sts	0x0558, r25
     a74:	80 93 57 05 	sts	0x0557, r24
     a78:	08 95       	ret

00000a7a <DeterminePaddleAngle>:
	}	

}

void DeterminePaddleAngle(int paddle){
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	7c 01       	movw	r14, r24
	
	currentMovementIn[1] = 0;
     a8c:	10 92 b6 05 	sts	0x05B6, r1
     a90:	10 92 b5 05 	sts	0x05B5, r1
	currentMovementIn[0] = 0;
     a94:	10 92 b4 05 	sts	0x05B4, r1
     a98:	10 92 b3 05 	sts	0x05B3, r1
	
	int directionOne;
	int directionTwo;
	
		//pong
	if(currentGame == 1){
     a9c:	c0 90 bb 05 	lds	r12, 0x05BB
     aa0:	d0 90 bc 05 	lds	r13, 0x05BC
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	c8 16       	cp	r12, r24
     aa8:	d1 04       	cpc	r13, r1
     aaa:	49 f4       	brne	.+18     	; 0xabe <DeterminePaddleAngle+0x44>
     aac:	c1 e0       	ldi	r28, 0x01	; 1
     aae:	d0 e0       	ldi	r29, 0x00	; 0
     ab0:	03 e0       	ldi	r16, 0x03	; 3
     ab2:	10 e0       	ldi	r17, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	0c c0       	rjmp	.+24     	; 0xad6 <DeterminePaddleAngle+0x5c>
		
		directionOne = 0;//x dir
		directionTwo = 1;//y dir
		
	//breakout
	} else if(currentGame == 2){
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	c9 16       	cp	r12, r25
     ac2:	d1 04       	cpc	r13, r1
     ac4:	41 f4       	brne	.+16     	; 0xad6 <DeterminePaddleAngle+0x5c>
     ac6:	c0 e0       	ldi	r28, 0x00	; 0
     ac8:	d0 e0       	ldi	r29, 0x00	; 0
     aca:	02 e0       	ldi	r16, 0x02	; 2
     acc:	10 e0       	ldi	r17, 0x00	; 0
     ace:	a1 e0       	ldi	r26, 0x01	; 1
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
		directionTwo = 0;//x dir

	}
	int distance = 0;

	if(paddle == 1){
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	e8 16       	cp	r14, r24
     ada:	f1 04       	cpc	r15, r1
     adc:	f1 f4       	brne	.+60     	; 0xb1a <__stack+0x1b>

		paddleCenter1 = paddleOne[coordOne] + 5;
     ade:	fe 01       	movw	r30, r28
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ed 57       	subi	r30, 0x7D	; 125
     ae6:	fa 4f       	sbci	r31, 0xFA	; 250
     ae8:	80 81       	ld	r24, Z
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	ac 01       	movw	r20, r24
     aee:	4b 5f       	subi	r20, 0xFB	; 251
     af0:	5f 4f       	sbci	r21, 0xFF	; 255
		paddleCenter2 = paddleOne[coordOne] + 8;
     af2:	bc 01       	movw	r22, r24
     af4:	68 5f       	subi	r22, 0xF8	; 248
     af6:	7f 4f       	sbci	r23, 0xFF	; 255
		
		ballDirection[directionOne] = 1;
     af8:	aa 0f       	add	r26, r26
     afa:	bb 1f       	adc	r27, r27
     afc:	a9 55       	subi	r26, 0x59	; 89
     afe:	ba 4f       	sbci	r27, 0xFA	; 250
     b00:	ed 92       	st	X+, r14
     b02:	fc 92       	st	X, r15
		
		if(currentGame == 2){
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	c9 16       	cp	r12, r25
     b08:	d1 04       	cpc	r13, r1
     b0a:	29 f5       	brne	.+74     	; 0xb56 <__stack+0x57>
			
			ballDirection[1] = -1;
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	9f ef       	ldi	r25, 0xFF	; 255
     b10:	90 93 aa 05 	sts	0x05AA, r25
     b14:	80 93 a9 05 	sts	0x05A9, r24
     b18:	1e c0       	rjmp	.+60     	; 0xb56 <__stack+0x57>
		
		}
		
	} else if(paddle == 2) {
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	e8 16       	cp	r14, r24
     b1e:	f1 04       	cpc	r15, r1
     b20:	29 f0       	breq	.+10     	; 0xb2c <__stack+0x2d>
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	15 c0       	rjmp	.+42     	; 0xb56 <__stack+0x57>

		paddleCenter1 = paddleTwo[coordOne] + 5;
     b2c:	fe 01       	movw	r30, r28
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	e1 56       	subi	r30, 0x61	; 97
     b34:	fa 4f       	sbci	r31, 0xFA	; 250
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	ac 01       	movw	r20, r24
     b3c:	4b 5f       	subi	r20, 0xFB	; 251
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
		paddleCenter2 = paddleTwo[coordOne] + 8;
     b40:	bc 01       	movw	r22, r24
     b42:	68 5f       	subi	r22, 0xF8	; 248
     b44:	7f 4f       	sbci	r23, 0xFF	; 255

		ballDirection[directionOne] = -1;
     b46:	aa 0f       	add	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	a9 55       	subi	r26, 0x59	; 89
     b4c:	ba 4f       	sbci	r27, 0xFA	; 250
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	8d 93       	st	X+, r24
     b54:	9c 93       	st	X, r25

	}

	//determine which side of the paddle and find distance
	if(ballPos[coordOne] < paddleCenter1){
     b56:	cc 0f       	add	r28, r28
     b58:	dd 1f       	adc	r29, r29
     b5a:	cb 56       	subi	r28, 0x6B	; 107
     b5c:	da 4f       	sbci	r29, 0xFA	; 250
     b5e:	e8 81       	ld	r30, Y
     b60:	f9 81       	ldd	r31, Y+1	; 0x01
     b62:	e4 17       	cp	r30, r20
     b64:	f5 07       	cpc	r31, r21
     b66:	74 f4       	brge	.+28     	; 0xb84 <__stack+0x85>

		//tophalf
		ballDirection[directionTwo] = -1;
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	29 55       	subi	r18, 0x59	; 89
     b6e:	3a 4f       	sbci	r19, 0xFA	; 250
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	9f ef       	ldi	r25, 0xFF	; 255
     b74:	d9 01       	movw	r26, r18
     b76:	8d 93       	st	X+, r24
     b78:	9c 93       	st	X, r25
		
		distance = paddleCenter1 - ballPos[coordOne];
     b7a:	ca 01       	movw	r24, r20
     b7c:	8e 1b       	sub	r24, r30
     b7e:	9f 0b       	sbc	r25, r31
     b80:	fc 01       	movw	r30, r24
     b82:	1c c0       	rjmp	.+56     	; 0xbbc <__stack+0xbd>


	} else if (ballPos[coordTwo] > paddleCenter2) {
     b84:	00 0f       	add	r16, r16
     b86:	11 1f       	adc	r17, r17
     b88:	0b 56       	subi	r16, 0x6B	; 107
     b8a:	1a 4f       	sbci	r17, 0xFA	; 250
     b8c:	d8 01       	movw	r26, r16
     b8e:	ed 91       	ld	r30, X+
     b90:	fc 91       	ld	r31, X
     b92:	d9 01       	movw	r26, r18
     b94:	aa 0f       	add	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	6e 17       	cp	r22, r30
     b9a:	7f 07       	cpc	r23, r31
     b9c:	4c f4       	brge	.+18     	; 0xbb0 <__stack+0xb1>

		//bottomhalf
		ballDirection[directionTwo] = 1;
     b9e:	a9 55       	subi	r26, 0x59	; 89
     ba0:	ba 4f       	sbci	r27, 0xFA	; 250
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	8d 93       	st	X+, r24
     ba8:	9c 93       	st	X, r25

		distance = ballPos[coordTwo] - paddleCenter2;
     baa:	e6 1b       	sub	r30, r22
     bac:	f7 0b       	sbc	r31, r23
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <__stack+0xbd>

	} else {

		ballDirection[directionTwo] = 0;
     bb0:	a9 55       	subi	r26, 0x59	; 89
     bb2:	ba 4f       	sbci	r27, 0xFA	; 250
     bb4:	1d 92       	st	X+, r1
     bb6:	1c 92       	st	X, r1
     bb8:	e0 e0       	ldi	r30, 0x00	; 0
     bba:	f0 e0       	ldi	r31, 0x00	; 0
		distance = 0;
	}
	
	currentAngle = distance;
     bbc:	f0 93 b8 05 	sts	0x05B8, r31
     bc0:	e0 93 b7 05 	sts	0x05B7, r30

	switch(distance){
     bc4:	e5 30       	cpi	r30, 0x05	; 5
     bc6:	f1 05       	cpc	r31, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <__stack+0xcd>
     bca:	72 c0       	rjmp	.+228    	; 0xcb0 <__stack+0x1b1>
     bcc:	e6 30       	cpi	r30, 0x06	; 6
     bce:	f1 05       	cpc	r31, r1
     bd0:	bc f4       	brge	.+46     	; 0xc00 <__stack+0x101>
     bd2:	e2 30       	cpi	r30, 0x02	; 2
     bd4:	f1 05       	cpc	r31, r1
     bd6:	09 f4       	brne	.+2      	; 0xbda <__stack+0xdb>
     bd8:	4a c0       	rjmp	.+148    	; 0xc6e <__stack+0x16f>
     bda:	e3 30       	cpi	r30, 0x03	; 3
     bdc:	f1 05       	cpc	r31, r1
     bde:	3c f4       	brge	.+14     	; 0xbee <__stack+0xef>
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	39 f1       	breq	.+78     	; 0xc32 <__stack+0x133>
     be4:	e1 30       	cpi	r30, 0x01	; 1
     be6:	f1 05       	cpc	r31, r1
     be8:	09 f0       	breq	.+2      	; 0xbec <__stack+0xed>
     bea:	9c c0       	rjmp	.+312    	; 0xd24 <__stack+0x225>
     bec:	31 c0       	rjmp	.+98     	; 0xc50 <__stack+0x151>
     bee:	e3 30       	cpi	r30, 0x03	; 3
     bf0:	f1 05       	cpc	r31, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <__stack+0xf7>
     bf4:	3f c0       	rjmp	.+126    	; 0xc74 <__stack+0x175>
     bf6:	e4 30       	cpi	r30, 0x04	; 4
     bf8:	f1 05       	cpc	r31, r1
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__stack+0xff>
     bfc:	93 c0       	rjmp	.+294    	; 0xd24 <__stack+0x225>
     bfe:	47 c0       	rjmp	.+142    	; 0xc8e <__stack+0x18f>
     c00:	e8 30       	cpi	r30, 0x08	; 8
     c02:	f1 05       	cpc	r31, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <__stack+0x109>
     c06:	6d c0       	rjmp	.+218    	; 0xce2 <__stack+0x1e3>
     c08:	e9 30       	cpi	r30, 0x09	; 9
     c0a:	f1 05       	cpc	r31, r1
     c0c:	4c f4       	brge	.+18     	; 0xc20 <__stack+0x121>
     c0e:	e6 30       	cpi	r30, 0x06	; 6
     c10:	f1 05       	cpc	r31, r1
     c12:	09 f4       	brne	.+2      	; 0xc16 <__stack+0x117>
     c14:	5a c0       	rjmp	.+180    	; 0xcca <__stack+0x1cb>
     c16:	e7 30       	cpi	r30, 0x07	; 7
     c18:	f1 05       	cpc	r31, r1
     c1a:	09 f0       	breq	.+2      	; 0xc1e <__stack+0x11f>
     c1c:	83 c0       	rjmp	.+262    	; 0xd24 <__stack+0x225>
     c1e:	5e c0       	rjmp	.+188    	; 0xcdc <__stack+0x1dd>
     c20:	e9 30       	cpi	r30, 0x09	; 9
     c22:	f1 05       	cpc	r31, r1
     c24:	09 f4       	brne	.+2      	; 0xc28 <__stack+0x129>
     c26:	6c c0       	rjmp	.+216    	; 0xd00 <__stack+0x201>
     c28:	ea 30       	cpi	r30, 0x0A	; 10
     c2a:	f1 05       	cpc	r31, r1
     c2c:	09 f0       	breq	.+2      	; 0xc30 <__stack+0x131>
     c2e:	7a c0       	rjmp	.+244    	; 0xd24 <__stack+0x225>
     c30:	67 c0       	rjmp	.+206    	; 0xd00 <__stack+0x201>

		case 0:
			movementIn[1] = 0;
     c32:	10 92 56 05 	sts	0x0556, r1
     c36:	10 92 55 05 	sts	0x0555, r1
			movementIn[0] = 1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 54 05 	sts	0x0554, r25
     c42:	80 93 53 05 	sts	0x0553, r24
			ballAngleSpeed = 0;
     c46:	10 92 ba 05 	sts	0x05BA, r1
     c4a:	10 92 b9 05 	sts	0x05B9, r1
     c4e:	6a c0       	rjmp	.+212    	; 0xd24 <__stack+0x225>
			break;
		case 1:
			movementIn[1] = 1;
     c50:	f0 93 56 05 	sts	0x0556, r31
     c54:	e0 93 55 05 	sts	0x0555, r30
			movementIn[0] = 4;
     c58:	84 e0       	ldi	r24, 0x04	; 4
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	90 93 54 05 	sts	0x0554, r25
     c60:	80 93 53 05 	sts	0x0553, r24
			ballAngleSpeed = 1; 
     c64:	f0 93 ba 05 	sts	0x05BA, r31
     c68:	e0 93 b9 05 	sts	0x05B9, r30
     c6c:	5b c0       	rjmp	.+182    	; 0xd24 <__stack+0x225>
			break;
		case 2:
			movementIn[1] = 1;
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	0f c0       	rjmp	.+30     	; 0xc92 <__stack+0x193>
			movementIn[0] = 3;
			ballAngleSpeed = 1; 
			break;
		case 3:
			movementIn[1] = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	90 93 56 05 	sts	0x0556, r25
     c7c:	80 93 55 05 	sts	0x0555, r24
			movementIn[0] = 2;
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 93 54 05 	sts	0x0554, r25
     c88:	80 93 53 05 	sts	0x0553, r24
     c8c:	47 c0       	rjmp	.+142    	; 0xd1c <__stack+0x21d>
			ballAngleSpeed = 2; 
			break;
		case 4:
			movementIn[1] = 2;
     c8e:	22 e0       	ldi	r18, 0x02	; 2
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	30 93 56 05 	sts	0x0556, r19
     c96:	20 93 55 05 	sts	0x0555, r18
			movementIn[0] = 3;
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	90 93 54 05 	sts	0x0554, r25
     ca2:	80 93 53 05 	sts	0x0553, r24
			ballAngleSpeed = 2; 
     ca6:	30 93 ba 05 	sts	0x05BA, r19
     caa:	20 93 b9 05 	sts	0x05B9, r18
     cae:	3a c0       	rjmp	.+116    	; 0xd24 <__stack+0x225>
			break;
		case 5: 
			movementIn[1] = 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	90 93 56 05 	sts	0x0556, r25
     cb8:	80 93 55 05 	sts	0x0555, r24
			movementIn[0] = 1;
     cbc:	90 93 54 05 	sts	0x0554, r25
     cc0:	80 93 53 05 	sts	0x0553, r24
			ballAngleSpeed = 3;
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	29 c0       	rjmp	.+82     	; 0xd1c <__stack+0x21d>
			break;
		case 6: 
			movementIn[1] = 3;
     cca:	23 e0       	ldi	r18, 0x03	; 3
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	30 93 56 05 	sts	0x0556, r19
     cd2:	20 93 55 05 	sts	0x0555, r18
			movementIn[0] = 2;
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	e1 cf       	rjmp	.-62     	; 0xc9e <__stack+0x19f>
			ballAngleSpeed = 3;
			break;
		case 7: 
			movementIn[1] = 2;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <__stack+0x1e7>
			movementIn[0] = 1;
			ballAngleSpeed = 4;
			break;
		case 8:
			movementIn[1] = 3;
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	90 93 56 05 	sts	0x0556, r25
     cea:	80 93 55 05 	sts	0x0555, r24
			movementIn[0] = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	90 93 54 05 	sts	0x0554, r25
     cf6:	80 93 53 05 	sts	0x0553, r24
			ballAngleSpeed = 4; 
     cfa:	84 e0       	ldi	r24, 0x04	; 4
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e c0       	rjmp	.+28     	; 0xd1c <__stack+0x21d>
			movementIn[1] = 4;
			movementIn[0] = 1;
			ballAngleSpeed = 5; 
			break;
		case 10:
			movementIn[1] = 4;
     d00:	84 e0       	ldi	r24, 0x04	; 4
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	90 93 56 05 	sts	0x0556, r25
     d08:	80 93 55 05 	sts	0x0555, r24
			movementIn[0] = 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	90 93 54 05 	sts	0x0554, r25
     d14:	80 93 53 05 	sts	0x0553, r24
			ballAngleSpeed = 5; 
     d18:	85 e0       	ldi	r24, 0x05	; 5
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	90 93 ba 05 	sts	0x05BA, r25
     d20:	80 93 b9 05 	sts	0x05B9, r24
			break;

	}
	
	int temp = movementIn[0];
     d24:	40 91 53 05 	lds	r20, 0x0553
     d28:	50 91 54 05 	lds	r21, 0x0554
	
	//need to invert the angles
	if(currentGame == 2){
     d2c:	b2 e0       	ldi	r27, 0x02	; 2
     d2e:	cb 16       	cp	r12, r27
     d30:	d1 04       	cpc	r13, r1
     d32:	91 f5       	brne	.+100    	; 0xd98 <__stack+0x299>
		
		//handle special cases
		if(currentAngle == 0){
     d34:	ef 2b       	or	r30, r31
     d36:	21 f4       	brne	.+8      	; 0xd40 <__stack+0x241>
			
			currentAngle = currentAngle;
     d38:	10 92 b8 05 	sts	0x05B8, r1
     d3c:	10 92 b7 05 	sts	0x05B7, r1
			
		} if (currentAngle == 10){
     d40:	20 91 b7 05 	lds	r18, 0x05B7
     d44:	30 91 b8 05 	lds	r19, 0x05B8
     d48:	2a 30       	cpi	r18, 0x0A	; 10
     d4a:	31 05       	cpc	r19, r1
     d4c:	89 f4       	brne	.+34     	; 0xd70 <__stack+0x271>
			
			currentAngle = 1;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 93 b8 05 	sts	0x05B8, r25
     d56:	80 93 b7 05 	sts	0x05B7, r24
			movementIn[0] = 1;
     d5a:	90 93 54 05 	sts	0x0554, r25
     d5e:	80 93 53 05 	sts	0x0553, r24
			movementIn[1] = 4;
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	90 93 56 05 	sts	0x0556, r25
     d6a:	80 93 55 05 	sts	0x0555, r24
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <__stack+0x299>
		
		} else {
			movementIn[0] = movementIn[1];
     d70:	80 91 55 05 	lds	r24, 0x0555
     d74:	90 91 56 05 	lds	r25, 0x0556
     d78:	90 93 54 05 	sts	0x0554, r25
     d7c:	80 93 53 05 	sts	0x0553, r24
			movementIn[1] = temp;
     d80:	50 93 56 05 	sts	0x0556, r21
     d84:	40 93 55 05 	sts	0x0555, r20
			
			currentAngle = 10 - currentAngle;
     d88:	8a e0       	ldi	r24, 0x0A	; 10
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	82 1b       	sub	r24, r18
     d8e:	93 0b       	sbc	r25, r19
     d90:	90 93 b8 05 	sts	0x05B8, r25
     d94:	80 93 b7 05 	sts	0x05B7, r24
			//usb_serial_putchar(currentAngle + '0');
			//usb_serial_putchar(movementIn[0] + '0');
			//usb_serial_putchar(movementIn[1] + '0');
		}
	}
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	08 95       	ret

00000daa <MoveBall>:

//moves the ball to next position and determines next position
void MoveBall(){
	
	if(currentAngle == 0){
     daa:	80 91 b7 05 	lds	r24, 0x05B7
     dae:	90 91 b8 05 	lds	r25, 0x05B8
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	21 f0       	breq	.+8      	; 0xdbe <MoveBall+0x14>
		nextBallPos[0] = ballPos[0] + (1 * ballDirection[0]);
		nextBallPos[2] = ballPos[2] + (1 * ballDirection[0]);
		nextBallPos[1] = ballPos[1] + (1 * ballDirection[1]);
		nextBallPos[3] = ballPos[3] + (1 * ballDirection[1]);

	} else if (currentAngle == 5){
     db6:	85 30       	cpi	r24, 0x05	; 5
     db8:	91 05       	cpc	r25, r1
     dba:	09 f0       	breq	.+2      	; 0xdbe <MoveBall+0x14>
     dbc:	49 c0       	rjmp	.+146    	; 0xe50 <MoveBall+0xa6>

		//need to update both x and y at the same time
		//x change
		ballPos[0] += (1 * ballDirection[0]);
     dbe:	a0 91 a7 05 	lds	r26, 0x05A7
     dc2:	b0 91 a8 05 	lds	r27, 0x05A8
     dc6:	60 91 95 05 	lds	r22, 0x0595
     dca:	70 91 96 05 	lds	r23, 0x0596
     dce:	6a 0f       	add	r22, r26
     dd0:	7b 1f       	adc	r23, r27
     dd2:	70 93 96 05 	sts	0x0596, r23
     dd6:	60 93 95 05 	sts	0x0595, r22
		ballPos[2] += (1 * ballDirection[0]);
     dda:	40 91 99 05 	lds	r20, 0x0599
     dde:	50 91 9a 05 	lds	r21, 0x059A
     de2:	4a 0f       	add	r20, r26
     de4:	5b 1f       	adc	r21, r27
     de6:	50 93 9a 05 	sts	0x059A, r21
     dea:	40 93 99 05 	sts	0x0599, r20
		//y change
		ballPos[1] += (1 * ballDirection[1]);
     dee:	e0 91 a9 05 	lds	r30, 0x05A9
     df2:	f0 91 aa 05 	lds	r31, 0x05AA
     df6:	20 91 97 05 	lds	r18, 0x0597
     dfa:	30 91 98 05 	lds	r19, 0x0598
     dfe:	2e 0f       	add	r18, r30
     e00:	3f 1f       	adc	r19, r31
     e02:	30 93 98 05 	sts	0x0598, r19
     e06:	20 93 97 05 	sts	0x0597, r18
		ballPos[3] += (1 * ballDirection[1]);
     e0a:	80 91 9b 05 	lds	r24, 0x059B
     e0e:	90 91 9c 05 	lds	r25, 0x059C
     e12:	8e 0f       	add	r24, r30
     e14:	9f 1f       	adc	r25, r31
     e16:	90 93 9c 05 	sts	0x059C, r25
     e1a:	80 93 9b 05 	sts	0x059B, r24
		
		nextBallPos[0] = ballPos[0] + (1 * ballDirection[0]);
     e1e:	6a 0f       	add	r22, r26
     e20:	7b 1f       	adc	r23, r27
     e22:	70 93 ac 05 	sts	0x05AC, r23
     e26:	60 93 ab 05 	sts	0x05AB, r22
		nextBallPos[2] = ballPos[2] + (1 * ballDirection[0]);
     e2a:	4a 0f       	add	r20, r26
     e2c:	5b 1f       	adc	r21, r27
     e2e:	50 93 b0 05 	sts	0x05B0, r21
     e32:	40 93 af 05 	sts	0x05AF, r20
		nextBallPos[1] = ballPos[1] + (1 * ballDirection[1]);
     e36:	2e 0f       	add	r18, r30
     e38:	3f 1f       	adc	r19, r31
     e3a:	30 93 ae 05 	sts	0x05AE, r19
     e3e:	20 93 ad 05 	sts	0x05AD, r18
		nextBallPos[3] = ballPos[3] + (1 * ballDirection[1]);
     e42:	8e 0f       	add	r24, r30
     e44:	9f 1f       	adc	r25, r31
     e46:	90 93 b2 05 	sts	0x05B2, r25
     e4a:	80 93 b1 05 	sts	0x05B1, r24
     e4e:	08 95       	ret

	} else if(currentAngle < 4){
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	91 05       	cpc	r25, r1
     e54:	b4 f5       	brge	.+108    	; 0xec2 <MoveBall+0x118>
		
		ballPos[0] += (1 * ballDirection[0]);
     e56:	40 91 a7 05 	lds	r20, 0x05A7
     e5a:	50 91 a8 05 	lds	r21, 0x05A8
     e5e:	20 91 95 05 	lds	r18, 0x0595
     e62:	30 91 96 05 	lds	r19, 0x0596
     e66:	24 0f       	add	r18, r20
     e68:	35 1f       	adc	r19, r21
     e6a:	30 93 96 05 	sts	0x0596, r19
     e6e:	20 93 95 05 	sts	0x0595, r18
		ballPos[2] += (1 * ballDirection[0]);
     e72:	80 91 99 05 	lds	r24, 0x0599
     e76:	90 91 9a 05 	lds	r25, 0x059A
     e7a:	84 0f       	add	r24, r20
     e7c:	95 1f       	adc	r25, r21
     e7e:	90 93 9a 05 	sts	0x059A, r25
     e82:	80 93 99 05 	sts	0x0599, r24
		
		nextBallPos[0] = ballPos[0] + (1 * ballDirection[0]);
     e86:	24 0f       	add	r18, r20
     e88:	35 1f       	adc	r19, r21
     e8a:	30 93 ac 05 	sts	0x05AC, r19
     e8e:	20 93 ab 05 	sts	0x05AB, r18
		nextBallPos[2] = ballPos[2] + (1 * ballDirection[0]);
     e92:	84 0f       	add	r24, r20
     e94:	95 1f       	adc	r25, r21
     e96:	90 93 b0 05 	sts	0x05B0, r25
     e9a:	80 93 af 05 	sts	0x05AF, r24

		currentMovementIn[0]++;
     e9e:	80 91 b3 05 	lds	r24, 0x05B3
     ea2:	90 91 b4 05 	lds	r25, 0x05B4
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	90 93 b4 05 	sts	0x05B4, r25
     eac:	80 93 b3 05 	sts	0x05B3, r24

		if(currentMovementIn[0] == movementIn[0]){
     eb0:	20 91 53 05 	lds	r18, 0x0553
     eb4:	30 91 54 05 	lds	r19, 0x0554
     eb8:	82 17       	cp	r24, r18
     eba:	93 07       	cpc	r25, r19
     ebc:	09 f0       	breq	.+2      	; 0xec0 <MoveBall+0x116>
     ebe:	21 c1       	rjmp	.+578    	; 0x1102 <MoveBall+0x358>
     ec0:	38 c0       	rjmp	.+112    	; 0xf32 <MoveBall+0x188>

			currentMovementIn[0] = 0;
		}


	} else if(currentAngle == 4){
     ec2:	84 30       	cpi	r24, 0x04	; 4
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f0       	breq	.+2      	; 0xeca <MoveBall+0x120>
     ec8:	5d c0       	rjmp	.+186    	; 0xf84 <MoveBall+0x1da>

		ballPos[0] += (1 * ballDirection[0]);
     eca:	40 91 a7 05 	lds	r20, 0x05A7
     ece:	50 91 a8 05 	lds	r21, 0x05A8
     ed2:	20 91 95 05 	lds	r18, 0x0595
     ed6:	30 91 96 05 	lds	r19, 0x0596
     eda:	24 0f       	add	r18, r20
     edc:	35 1f       	adc	r19, r21
     ede:	30 93 96 05 	sts	0x0596, r19
     ee2:	20 93 95 05 	sts	0x0595, r18
		ballPos[2] += (1 * ballDirection[0]);
     ee6:	80 91 99 05 	lds	r24, 0x0599
     eea:	90 91 9a 05 	lds	r25, 0x059A
     eee:	84 0f       	add	r24, r20
     ef0:	95 1f       	adc	r25, r21
     ef2:	90 93 9a 05 	sts	0x059A, r25
     ef6:	80 93 99 05 	sts	0x0599, r24
		
		nextBallPos[0] = ballPos[0] + (1 * ballDirection[0]);
     efa:	24 0f       	add	r18, r20
     efc:	35 1f       	adc	r19, r21
     efe:	30 93 ac 05 	sts	0x05AC, r19
     f02:	20 93 ab 05 	sts	0x05AB, r18
		nextBallPos[2] = ballPos[2] + (1 * ballDirection[0]);
     f06:	84 0f       	add	r24, r20
     f08:	95 1f       	adc	r25, r21
     f0a:	90 93 b0 05 	sts	0x05B0, r25
     f0e:	80 93 af 05 	sts	0x05AF, r24

		currentMovementIn[0]++;
     f12:	80 91 b3 05 	lds	r24, 0x05B3
     f16:	90 91 b4 05 	lds	r25, 0x05B4
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	90 93 b4 05 	sts	0x05B4, r25
     f20:	80 93 b3 05 	sts	0x05B3, r24

		if(currentMovementIn[0]%2 == 1){
     f24:	62 e0       	ldi	r22, 0x02	; 2
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divmodhi4>
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <MoveBall+0x188>
     f30:	e8 c0       	rjmp	.+464    	; 0x1102 <MoveBall+0x358>

			//shift up one
			ballPos[1] += (1 * ballDirection[1]);
     f32:	40 91 a9 05 	lds	r20, 0x05A9
     f36:	50 91 aa 05 	lds	r21, 0x05AA
     f3a:	20 91 97 05 	lds	r18, 0x0597
     f3e:	30 91 98 05 	lds	r19, 0x0598
     f42:	24 0f       	add	r18, r20
     f44:	35 1f       	adc	r19, r21
     f46:	30 93 98 05 	sts	0x0598, r19
     f4a:	20 93 97 05 	sts	0x0597, r18
			ballPos[3] += (1 * ballDirection[1]);
     f4e:	80 91 9b 05 	lds	r24, 0x059B
     f52:	90 91 9c 05 	lds	r25, 0x059C
     f56:	84 0f       	add	r24, r20
     f58:	95 1f       	adc	r25, r21
     f5a:	90 93 9c 05 	sts	0x059C, r25
     f5e:	80 93 9b 05 	sts	0x059B, r24
			nextBallPos[1] = ballPos[1] + (1 * ballDirection[1]);
     f62:	24 0f       	add	r18, r20
     f64:	35 1f       	adc	r19, r21
     f66:	30 93 ae 05 	sts	0x05AE, r19
     f6a:	20 93 ad 05 	sts	0x05AD, r18
			nextBallPos[3] = ballPos[3] + (1 * ballDirection[1]);
     f6e:	84 0f       	add	r24, r20
     f70:	95 1f       	adc	r25, r21
     f72:	90 93 b2 05 	sts	0x05B2, r25
     f76:	80 93 b1 05 	sts	0x05B1, r24

			currentMovementIn[0] = 0;
     f7a:	10 92 b4 05 	sts	0x05B4, r1
     f7e:	10 92 b3 05 	sts	0x05B3, r1
     f82:	08 95       	ret

		}

	} else if(currentAngle > 6){
     f84:	87 30       	cpi	r24, 0x07	; 7
     f86:	91 05       	cpc	r25, r1
     f88:	0c f4       	brge	.+2      	; 0xf8c <MoveBall+0x1e2>
     f8a:	5e c0       	rjmp	.+188    	; 0x1048 <MoveBall+0x29e>
	
		ballPos[1] += (1 * ballDirection[1]);
     f8c:	40 91 a9 05 	lds	r20, 0x05A9
     f90:	50 91 aa 05 	lds	r21, 0x05AA
     f94:	20 91 97 05 	lds	r18, 0x0597
     f98:	30 91 98 05 	lds	r19, 0x0598
     f9c:	24 0f       	add	r18, r20
     f9e:	35 1f       	adc	r19, r21
     fa0:	30 93 98 05 	sts	0x0598, r19
     fa4:	20 93 97 05 	sts	0x0597, r18
		ballPos[3] += (1 * ballDirection[1]);
     fa8:	80 91 9b 05 	lds	r24, 0x059B
     fac:	90 91 9c 05 	lds	r25, 0x059C
     fb0:	84 0f       	add	r24, r20
     fb2:	95 1f       	adc	r25, r21
     fb4:	90 93 9c 05 	sts	0x059C, r25
     fb8:	80 93 9b 05 	sts	0x059B, r24
		nextBallPos[1] = ballPos[1] + (1 * ballDirection[1]);
     fbc:	24 0f       	add	r18, r20
     fbe:	35 1f       	adc	r19, r21
     fc0:	30 93 ae 05 	sts	0x05AE, r19
     fc4:	20 93 ad 05 	sts	0x05AD, r18
		nextBallPos[3] = ballPos[3] + (1 * ballDirection[1]);
     fc8:	84 0f       	add	r24, r20
     fca:	95 1f       	adc	r25, r21
     fcc:	90 93 b2 05 	sts	0x05B2, r25
     fd0:	80 93 b1 05 	sts	0x05B1, r24

		currentMovementIn[1]++;
     fd4:	80 91 b5 05 	lds	r24, 0x05B5
     fd8:	90 91 b6 05 	lds	r25, 0x05B6
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	90 93 b6 05 	sts	0x05B6, r25
     fe2:	80 93 b5 05 	sts	0x05B5, r24

		if(currentMovementIn[1] == movementIn[1]){
     fe6:	20 91 55 05 	lds	r18, 0x0555
     fea:	30 91 56 05 	lds	r19, 0x0556
     fee:	82 17       	cp	r24, r18
     ff0:	93 07       	cpc	r25, r19
     ff2:	09 f0       	breq	.+2      	; 0xff6 <MoveBall+0x24c>
     ff4:	86 c0       	rjmp	.+268    	; 0x1102 <MoveBall+0x358>

			//shift it across one place
			ballPos[0] += (1 * ballDirection[0]);
     ff6:	40 91 a7 05 	lds	r20, 0x05A7
     ffa:	50 91 a8 05 	lds	r21, 0x05A8
     ffe:	20 91 95 05 	lds	r18, 0x0595
    1002:	30 91 96 05 	lds	r19, 0x0596
    1006:	24 0f       	add	r18, r20
    1008:	35 1f       	adc	r19, r21
    100a:	30 93 96 05 	sts	0x0596, r19
    100e:	20 93 95 05 	sts	0x0595, r18
			ballPos[2] += (1 * ballDirection[0]);
    1012:	80 91 99 05 	lds	r24, 0x0599
    1016:	90 91 9a 05 	lds	r25, 0x059A
    101a:	84 0f       	add	r24, r20
    101c:	95 1f       	adc	r25, r21
    101e:	90 93 9a 05 	sts	0x059A, r25
    1022:	80 93 99 05 	sts	0x0599, r24
		
			nextBallPos[0] = ballPos[0] + (1 * ballDirection[0]);
    1026:	24 0f       	add	r18, r20
    1028:	35 1f       	adc	r19, r21
    102a:	30 93 ac 05 	sts	0x05AC, r19
    102e:	20 93 ab 05 	sts	0x05AB, r18
			nextBallPos[2] = ballPos[2] + (1 * ballDirection[0]);
    1032:	84 0f       	add	r24, r20
    1034:	95 1f       	adc	r25, r21
    1036:	90 93 b0 05 	sts	0x05B0, r25
    103a:	80 93 af 05 	sts	0x05AF, r24

			currentMovementIn[1] = 0;
    103e:	10 92 b6 05 	sts	0x05B6, r1
    1042:	10 92 b5 05 	sts	0x05B5, r1
    1046:	08 95       	ret

		}


	} else if(currentAngle == 6){
    1048:	06 97       	sbiw	r24, 0x06	; 6
    104a:	09 f0       	breq	.+2      	; 0x104e <MoveBall+0x2a4>
    104c:	5a c0       	rjmp	.+180    	; 0x1102 <MoveBall+0x358>

		ballPos[1] += (1 * ballDirection[1]);
    104e:	40 91 a9 05 	lds	r20, 0x05A9
    1052:	50 91 aa 05 	lds	r21, 0x05AA
    1056:	20 91 97 05 	lds	r18, 0x0597
    105a:	30 91 98 05 	lds	r19, 0x0598
    105e:	24 0f       	add	r18, r20
    1060:	35 1f       	adc	r19, r21
    1062:	30 93 98 05 	sts	0x0598, r19
    1066:	20 93 97 05 	sts	0x0597, r18
		ballPos[3] += (1 * ballDirection[1]);
    106a:	80 91 9b 05 	lds	r24, 0x059B
    106e:	90 91 9c 05 	lds	r25, 0x059C
    1072:	84 0f       	add	r24, r20
    1074:	95 1f       	adc	r25, r21
    1076:	90 93 9c 05 	sts	0x059C, r25
    107a:	80 93 9b 05 	sts	0x059B, r24
		nextBallPos[1] = ballPos[1] + (1 * ballDirection[1]);
    107e:	24 0f       	add	r18, r20
    1080:	35 1f       	adc	r19, r21
    1082:	30 93 ae 05 	sts	0x05AE, r19
    1086:	20 93 ad 05 	sts	0x05AD, r18
		nextBallPos[3] = ballPos[3] + (1 * ballDirection[1]);
    108a:	84 0f       	add	r24, r20
    108c:	95 1f       	adc	r25, r21
    108e:	90 93 b2 05 	sts	0x05B2, r25
    1092:	80 93 b1 05 	sts	0x05B1, r24

		currentMovementIn[1]++;
    1096:	80 91 b5 05 	lds	r24, 0x05B5
    109a:	90 91 b6 05 	lds	r25, 0x05B6
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	90 93 b6 05 	sts	0x05B6, r25
    10a4:	80 93 b5 05 	sts	0x05B5, r24

		if(currentMovementIn[1]%2 == 1){
    10a8:	62 e0       	ldi	r22, 0x02	; 2
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	fa d7       	rcall	.+4084   	; 0x20a2 <__divmodhi4>
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	41 f5       	brne	.+80     	; 0x1102 <MoveBall+0x358>

			//shift across one
			ballPos[0] += (1 * ballDirection[0]);
    10b2:	40 91 a7 05 	lds	r20, 0x05A7
    10b6:	50 91 a8 05 	lds	r21, 0x05A8
    10ba:	20 91 95 05 	lds	r18, 0x0595
    10be:	30 91 96 05 	lds	r19, 0x0596
    10c2:	24 0f       	add	r18, r20
    10c4:	35 1f       	adc	r19, r21
    10c6:	30 93 96 05 	sts	0x0596, r19
    10ca:	20 93 95 05 	sts	0x0595, r18
			ballPos[2] += (1 * ballDirection[0]);
    10ce:	80 91 99 05 	lds	r24, 0x0599
    10d2:	90 91 9a 05 	lds	r25, 0x059A
    10d6:	84 0f       	add	r24, r20
    10d8:	95 1f       	adc	r25, r21
    10da:	90 93 9a 05 	sts	0x059A, r25
    10de:	80 93 99 05 	sts	0x0599, r24
		
			nextBallPos[0] = ballPos[0] + (1 * ballDirection[0]);
    10e2:	24 0f       	add	r18, r20
    10e4:	35 1f       	adc	r19, r21
    10e6:	30 93 ac 05 	sts	0x05AC, r19
    10ea:	20 93 ab 05 	sts	0x05AB, r18
			nextBallPos[2] = ballPos[2] + (1 * ballDirection[0]);
    10ee:	84 0f       	add	r24, r20
    10f0:	95 1f       	adc	r25, r21
    10f2:	90 93 b0 05 	sts	0x05B0, r25
    10f6:	80 93 af 05 	sts	0x05AF, r24

			currentMovementIn[1] = 0;
    10fa:	10 92 b6 05 	sts	0x05B6, r1
    10fe:	10 92 b5 05 	sts	0x05B5, r1
    1102:	08 95       	ret

00001104 <InitBreakOutPositions>:
	}
}

void InitBreakOutPositions(){
	
	paddleOne[0] = 34;
    1104:	82 e2       	ldi	r24, 0x22	; 34
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	90 93 84 05 	sts	0x0584, r25
    110c:	80 93 83 05 	sts	0x0583, r24
	paddleOne[2] = 48;
    1110:	80 e3       	ldi	r24, 0x30	; 48
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	90 93 88 05 	sts	0x0588, r25
    1118:	80 93 87 05 	sts	0x0587, r24
	paddleOne[1] = 46;
    111c:	8e e2       	ldi	r24, 0x2E	; 46
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	90 93 86 05 	sts	0x0586, r25
    1124:	80 93 85 05 	sts	0x0585, r24
	paddleOne[3] = 47;
    1128:	8f e2       	ldi	r24, 0x2F	; 47
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	90 93 8a 05 	sts	0x058A, r25
    1130:	80 93 89 05 	sts	0x0589, r24
	
	ballPos[0] = 40;
    1134:	48 e2       	ldi	r20, 0x28	; 40
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	50 93 96 05 	sts	0x0596, r21
    113c:	40 93 95 05 	sts	0x0595, r20
	ballPos[2] = 42;
    1140:	2a e2       	ldi	r18, 0x2A	; 42
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	30 93 9a 05 	sts	0x059A, r19
    1148:	20 93 99 05 	sts	0x0599, r18
	ballPos[1] = 22;
    114c:	86 e1       	ldi	r24, 0x16	; 22
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	90 93 98 05 	sts	0x0598, r25
    1154:	80 93 97 05 	sts	0x0597, r24
	ballPos[3] = 24;
    1158:	88 e1       	ldi	r24, 0x18	; 24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	90 93 9c 05 	sts	0x059C, r25
    1160:	80 93 9b 05 	sts	0x059B, r24
	
	nextBallPos[0] = 40;
    1164:	50 93 ac 05 	sts	0x05AC, r21
    1168:	40 93 ab 05 	sts	0x05AB, r20
	nextBallPos[2] = 42;
    116c:	30 93 b0 05 	sts	0x05B0, r19
    1170:	20 93 af 05 	sts	0x05AF, r18
	nextBallPos[1] = 23;
    1174:	87 e1       	ldi	r24, 0x17	; 23
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	90 93 ae 05 	sts	0x05AE, r25
    117c:	80 93 ad 05 	sts	0x05AD, r24
	nextBallPos[3] = 25;
    1180:	89 e1       	ldi	r24, 0x19	; 25
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	90 93 b2 05 	sts	0x05B2, r25
    1188:	80 93 b1 05 	sts	0x05B1, r24
	
	ballDirection[0] = 0;
    118c:	10 92 a8 05 	sts	0x05A8, r1
    1190:	10 92 a7 05 	sts	0x05A7, r1
	ballDirection[1] = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 aa 05 	sts	0x05AA, r25
    119c:	80 93 a9 05 	sts	0x05A9, r24
	
	movementIn[0] = 0;
    11a0:	10 92 54 05 	sts	0x0554, r1
    11a4:	10 92 53 05 	sts	0x0553, r1
	movementIn[1] = 1;
    11a8:	90 93 56 05 	sts	0x0556, r25
    11ac:	80 93 55 05 	sts	0x0555, r24
	currentMovementIn[0] = 0;
    11b0:	10 92 b4 05 	sts	0x05B4, r1
    11b4:	10 92 b3 05 	sts	0x05B3, r1
	currentMovementIn[1] = 0;
    11b8:	10 92 b6 05 	sts	0x05B6, r1
    11bc:	10 92 b5 05 	sts	0x05B5, r1
	
	currentAngle = 0;
    11c0:	10 92 b8 05 	sts	0x05B8, r1
    11c4:	10 92 b7 05 	sts	0x05B7, r1
		//Speed tracking
	ballAngleSpeed = 0;
    11c8:	10 92 ba 05 	sts	0x05BA, r1
    11cc:	10 92 b9 05 	sts	0x05B9, r1
	adjustableSpeed = 0;
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	80 93 8d 05 	sts	0x058D, r24
    11dc:	90 93 8e 05 	sts	0x058E, r25
    11e0:	a0 93 8f 05 	sts	0x058F, r26
    11e4:	b0 93 90 05 	sts	0x0590, r27

	collision = 0;
    11e8:	10 92 52 05 	sts	0x0552, r1
    11ec:	10 92 51 05 	sts	0x0551, r1
	
	brickCount = 0;
    11f0:	10 92 94 05 	sts	0x0594, r1
    11f4:	10 92 93 05 	sts	0x0593, r1
    11f8:	e9 e5       	ldi	r30, 0x59	; 89
    11fa:	f5 e0       	ldi	r31, 0x05	; 5
	
	int i;
	for(i=0; i < INITIAL_NO_BRICKS; i++){
		
		bricks[i] = 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	81 93       	st	Z+, r24
    1202:	91 93       	st	Z+, r25
	collision = 0;
	
	brickCount = 0;
	
	int i;
	for(i=0; i < INITIAL_NO_BRICKS; i++){
    1204:	25 e0       	ldi	r18, 0x05	; 5
    1206:	e3 38       	cpi	r30, 0x83	; 131
    1208:	f2 07       	cpc	r31, r18
    120a:	d1 f7       	brne	.-12     	; 0x1200 <InitBreakOutPositions+0xfc>
		
		bricks[i] = 1;
	
	}
	
}
    120c:	08 95       	ret

0000120e <__vector_20>:
	UpdateBall();
	return collisionType;
	
}

ISR(TIMER1_OVF_vect){
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25

	ballCount++;
    121c:	80 91 91 05 	lds	r24, 0x0591
    1220:	90 91 92 05 	lds	r25, 0x0592
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	90 93 92 05 	sts	0x0592, r25
    122a:	80 93 91 05 	sts	0x0591, r24
	paddleOneCount++;
    122e:	80 91 4f 03 	lds	r24, 0x034F
    1232:	90 91 50 03 	lds	r25, 0x0350
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	90 93 50 03 	sts	0x0350, r25
    123c:	80 93 4f 03 	sts	0x034F, r24
	//paddleTwoCount++;

}
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <BrickBounce>:
	InitBreakOutPositions();
	UpdateBreakOut();

}

void BrickBounce(int row, int column){
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
	
	int collisionType = 0;
	
	//this just determines the direction in which to send the ball after it hits
	if(nextBallPos[1] > row*5){
    1252:	9c 01       	movw	r18, r24
    1254:	22 0f       	add	r18, r18
    1256:	33 1f       	adc	r19, r19
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	28 0f       	add	r18, r24
    125e:	39 1f       	adc	r19, r25
    1260:	80 91 ad 05 	lds	r24, 0x05AD
    1264:	90 91 ae 05 	lds	r25, 0x05AE
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	1c f4       	brge	.+6      	; 0x1274 <BrickBounce+0x26>
    126e:	c3 e0       	ldi	r28, 0x03	; 3
    1270:	d0 e0       	ldi	r29, 0x00	; 0
    1272:	29 c0       	rjmp	.+82     	; 0x12c6 <BrickBounce+0x78>
		
		collisionType = 3;
	
	} else if(nextBallPos[3] < row*5){
    1274:	80 91 b1 05 	lds	r24, 0x05B1
    1278:	90 91 b2 05 	lds	r25, 0x05B2
    127c:	82 17       	cp	r24, r18
    127e:	93 07       	cpc	r25, r19
    1280:	1c f4       	brge	.+6      	; 0x1288 <BrickBounce+0x3a>
    1282:	c4 e0       	ldi	r28, 0x04	; 4
    1284:	d0 e0       	ldi	r29, 0x00	; 0
    1286:	1f c0       	rjmp	.+62     	; 0x12c6 <BrickBounce+0x78>
		
		collisionType = 4;
	
	} else if(nextBallPos[0] <= column*12){
    1288:	9b 01       	movw	r18, r22
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	26 0f       	add	r18, r22
    1290:	37 1f       	adc	r19, r23
    1292:	22 0f       	add	r18, r18
    1294:	33 1f       	adc	r19, r19
    1296:	22 0f       	add	r18, r18
    1298:	33 1f       	adc	r19, r19
    129a:	80 91 ab 05 	lds	r24, 0x05AB
    129e:	90 91 ac 05 	lds	r25, 0x05AC
    12a2:	28 17       	cp	r18, r24
    12a4:	39 07       	cpc	r19, r25
    12a6:	1c f0       	brlt	.+6      	; 0x12ae <BrickBounce+0x60>
    12a8:	c7 e0       	ldi	r28, 0x07	; 7
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	0c c0       	rjmp	.+24     	; 0x12c6 <BrickBounce+0x78>
		
		collisionType = 7;
	
	} else if(nextBallPos[2] >= column*12) {
    12ae:	80 91 af 05 	lds	r24, 0x05AF
    12b2:	90 91 b0 05 	lds	r25, 0x05B0
    12b6:	82 17       	cp	r24, r18
    12b8:	93 07       	cpc	r25, r19
    12ba:	1c f0       	brlt	.+6      	; 0x12c2 <BrickBounce+0x74>
    12bc:	c6 e0       	ldi	r28, 0x06	; 6
    12be:	d0 e0       	ldi	r29, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <BrickBounce+0x78>
    12c2:	c0 e0       	ldi	r28, 0x00	; 0
    12c4:	d0 e0       	ldi	r29, 0x00	; 0
	
		collisionType = 6;
	}
	usb_serial_putchar(collisionType + '0');
    12c6:	9e 01       	movw	r18, r28
    12c8:	20 5d       	subi	r18, 0xD0	; 208
    12ca:	82 2f       	mov	r24, r18
    12cc:	13 d3       	rcall	.+1574   	; 0x18f4 <usb_serial_putchar>
	
	collision = collisionType;
    12ce:	d0 93 52 05 	sts	0x0552, r29
    12d2:	c0 93 51 05 	sts	0x0551, r28
	UpdateBall();
    12d6:	e2 d0       	rcall	.+452    	; 0x149c <UpdateBall>
	return collisionType;
	
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	08 95       	ret

000012de <BreakOutCollisions>:
	average = (average/1023);
	
	return average;
}

void BreakOutCollisions(){
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
	//int collisionCount = 0;
	
	int row = 0, column = 0;
	
	//only interested when ball is greater than paddle location
	if(nextBallPos[3] < paddleOne[1]){
    12e2:	20 91 b1 05 	lds	r18, 0x05B1
    12e6:	30 91 b2 05 	lds	r19, 0x05B2
    12ea:	80 91 85 05 	lds	r24, 0x0585
    12ee:	90 91 86 05 	lds	r25, 0x0586
    12f2:	28 17       	cp	r18, r24
    12f4:	39 07       	cpc	r19, r25
    12f6:	0c f0       	brlt	.+2      	; 0x12fa <BreakOutCollisions+0x1c>
    12f8:	47 c0       	rjmp	.+142    	; 0x1388 <BreakOutCollisions+0xaa>
		
		//check the column
		if(((ballPos[0]+1)%12) != 0){
    12fa:	20 91 95 05 	lds	r18, 0x0595
    12fe:	30 91 96 05 	lds	r19, 0x0596
    1302:	2f 5f       	subi	r18, 0xFF	; 255
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	c9 01       	movw	r24, r18
    1308:	6c e0       	ldi	r22, 0x0C	; 12
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	ca d6       	rcall	.+3476   	; 0x20a2 <__divmodhi4>
    130e:	89 2b       	or	r24, r25
    1310:	39 f0       	breq	.+14     	; 0x1320 <BreakOutCollisions+0x42>
		
			column =(ballPos[0]+1)/12 + 1;
    1312:	c9 01       	movw	r24, r18
    1314:	6c e0       	ldi	r22, 0x0C	; 12
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	c4 d6       	rcall	.+3464   	; 0x20a2 <__divmodhi4>
    131a:	eb 01       	movw	r28, r22
    131c:	21 96       	adiw	r28, 0x01	; 1
    131e:	05 c0       	rjmp	.+10     	; 0x132a <BreakOutCollisions+0x4c>
		
		} else {
	
			column =(ballPos[0]+1)/12;
    1320:	c9 01       	movw	r24, r18
    1322:	6c e0       	ldi	r22, 0x0C	; 12
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	bd d6       	rcall	.+3450   	; 0x20a2 <__divmodhi4>
    1328:	eb 01       	movw	r28, r22
		
		}
		
		row = ballPos[1]/5;
    132a:	80 91 97 05 	lds	r24, 0x0597
    132e:	90 91 98 05 	lds	r25, 0x0598
    1332:	65 e0       	ldi	r22, 0x05	; 5
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	b5 d6       	rcall	.+3434   	; 0x20a2 <__divmodhi4>
		
		if(row < 3){
    1338:	63 30       	cpi	r22, 0x03	; 3
    133a:	71 05       	cpc	r23, r1
    133c:	2c f5       	brge	.+74     	; 0x1388 <BreakOutCollisions+0xaa>
		
			//check bricks
			if(bricks[column + row*7 - 1] == 1){
    133e:	fb 01       	movw	r30, r22
    1340:	b3 e0       	ldi	r27, 0x03	; 3
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	ba 95       	dec	r27
    1348:	e1 f7       	brne	.-8      	; 0x1342 <BreakOutCollisions+0x64>
    134a:	e6 1b       	sub	r30, r22
    134c:	f7 0b       	sbc	r31, r23
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	ec 0f       	add	r30, r28
    1352:	fd 1f       	adc	r31, r29
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	e7 5a       	subi	r30, 0xA7	; 167
    135a:	fa 4f       	sbci	r31, 0xFA	; 250
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	91 f4       	brne	.+36     	; 0x1388 <BreakOutCollisions+0xaa>
				
				bricks[column + row*7 - 1] = 0;
    1364:	11 82       	std	Z+1, r1	; 0x01
    1366:	10 82       	st	Z, r1
				brickCount++;
    1368:	80 91 93 05 	lds	r24, 0x0593
    136c:	90 91 94 05 	lds	r25, 0x0594
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	90 93 94 05 	sts	0x0594, r25
    1376:	80 93 93 05 	sts	0x0593, r24
				
				collision =	BrickBounce(row, column);
    137a:	cb 01       	movw	r24, r22
    137c:	be 01       	movw	r22, r28
    137e:	67 df       	rcall	.-306    	; 0x124e <BrickBounce>
    1380:	90 93 52 05 	sts	0x0552, r25
    1384:	80 93 51 05 	sts	0x0551, r24
			}
		}
	}
	
	//rightwall
	if(ballPos[2] >= RIGHTWALL){
    1388:	20 91 99 05 	lds	r18, 0x0599
    138c:	30 91 9a 05 	lds	r19, 0x059A
    1390:	80 91 30 03 	lds	r24, 0x0330
    1394:	90 91 31 03 	lds	r25, 0x0331
    1398:	28 17       	cp	r18, r24
    139a:	39 07       	cpc	r19, r25
    139c:	1c f0       	brlt	.+6      	; 0x13a4 <BreakOutCollisions+0xc6>
		
		collision = 6;
    139e:	86 e0       	ldi	r24, 0x06	; 6
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0d c0       	rjmp	.+26     	; 0x13be <BreakOutCollisions+0xe0>
	
	} else if (ballPos[0] <= LEFTWALL){
    13a4:	20 91 95 05 	lds	r18, 0x0595
    13a8:	30 91 96 05 	lds	r19, 0x0596
    13ac:	80 91 53 03 	lds	r24, 0x0353
    13b0:	90 91 54 03 	lds	r25, 0x0354
    13b4:	82 17       	cp	r24, r18
    13b6:	93 07       	cpc	r25, r19
    13b8:	3c f0       	brlt	.+14     	; 0x13c8 <BreakOutCollisions+0xea>
	
		collision = 7;
    13ba:	87 e0       	ldi	r24, 0x07	; 7
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	90 93 52 05 	sts	0x0552, r25
    13c2:	80 93 51 05 	sts	0x0551, r24
    13c6:	5b c0       	rjmp	.+182    	; 0x147e <BreakOutCollisions+0x1a0>
		
	} else if(ballPos[1] <= TOPWALL){
    13c8:	20 91 97 05 	lds	r18, 0x0597
    13cc:	30 91 98 05 	lds	r19, 0x0598
    13d0:	80 91 51 03 	lds	r24, 0x0351
    13d4:	90 91 52 03 	lds	r25, 0x0352
    13d8:	82 17       	cp	r24, r18
    13da:	93 07       	cpc	r25, r19
    13dc:	1c f0       	brlt	.+6      	; 0x13e4 <BreakOutCollisions+0x106>

		collision = 3;
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	ed cf       	rjmp	.-38     	; 0x13be <BreakOutCollisions+0xe0>
	
	//paddle collision
	} else if((nextBallPos[3] >= paddleOne[1]) && 
    13e4:	40 91 b1 05 	lds	r20, 0x05B1
    13e8:	50 91 b2 05 	lds	r21, 0x05B2
    13ec:	80 91 85 05 	lds	r24, 0x0585
    13f0:	90 91 86 05 	lds	r25, 0x0586
    13f4:	48 17       	cp	r20, r24
    13f6:	59 07       	cpc	r21, r25
    13f8:	cc f0       	brlt	.+50     	; 0x142c <BreakOutCollisions+0x14e>
    13fa:	20 91 af 05 	lds	r18, 0x05AF
    13fe:	30 91 b0 05 	lds	r19, 0x05B0
    1402:	80 91 83 05 	lds	r24, 0x0583
    1406:	90 91 84 05 	lds	r25, 0x0584
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	74 f0       	brlt	.+28     	; 0x142c <BreakOutCollisions+0x14e>
    1410:	20 91 ab 05 	lds	r18, 0x05AB
    1414:	30 91 ac 05 	lds	r19, 0x05AC
    1418:	80 91 87 05 	lds	r24, 0x0587
    141c:	90 91 88 05 	lds	r25, 0x0588
    1420:	82 17       	cp	r24, r18
    1422:	93 07       	cpc	r25, r19
    1424:	1c f0       	brlt	.+6      	; 0x142c <BreakOutCollisions+0x14e>
		((nextBallPos[2] >= paddleOne[0])&&(nextBallPos[0] <= paddleOne[2]))){

		collision = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	c9 cf       	rjmp	.-110    	; 0x13be <BreakOutCollisions+0xe0>

	} else if ((nextBallPos[3] >= BOTTOMWALL) && //For Wall Behind Player
    142c:	80 91 2e 03 	lds	r24, 0x032E
    1430:	90 91 2f 03 	lds	r25, 0x032F
    1434:	48 17       	cp	r20, r24
    1436:	59 07       	cpc	r21, r25
    1438:	14 f1       	brlt	.+68     	; 0x147e <BreakOutCollisions+0x1a0>
    143a:	20 91 af 05 	lds	r18, 0x05AF
    143e:	30 91 b0 05 	lds	r19, 0x05B0
    1442:	80 91 83 05 	lds	r24, 0x0583
    1446:	90 91 84 05 	lds	r25, 0x0584
    144a:	28 17       	cp	r18, r24
    144c:	39 07       	cpc	r19, r25
    144e:	5c f0       	brlt	.+22     	; 0x1466 <BreakOutCollisions+0x188>
    1450:	20 91 ab 05 	lds	r18, 0x05AB
    1454:	30 91 ac 05 	lds	r19, 0x05AC
    1458:	80 91 87 05 	lds	r24, 0x0587
    145c:	90 91 88 05 	lds	r25, 0x0588
    1460:	82 17       	cp	r24, r18
    1462:	93 07       	cpc	r25, r19
    1464:	64 f4       	brge	.+24     	; 0x147e <BreakOutCollisions+0x1a0>
		((nextBallPos[2] < paddleOne[0])||(nextBallPos[0] > paddleOne[2]))){
		collision = 5;
    1466:	85 e0       	ldi	r24, 0x05	; 5
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	90 93 52 05 	sts	0x0552, r25
    146e:	80 93 51 05 	sts	0x0551, r24
		gameWinner = 2;
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 58 05 	sts	0x0558, r25
    147a:	80 93 57 05 	sts	0x0557, r24
	}
	
}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <DetectCollision>:


void DetectCollision(){

	collision = 0;
    1484:	10 92 52 05 	sts	0x0552, r1
    1488:	10 92 51 05 	sts	0x0551, r1
	
	if(currentGame == 2){
    148c:	80 91 bb 05 	lds	r24, 0x05BB
    1490:	90 91 bc 05 	lds	r25, 0x05BC
    1494:	02 97       	sbiw	r24, 0x02	; 2
    1496:	09 f4       	brne	.+2      	; 0x149a <DetectCollision+0x16>
		
		BreakOutCollisions();
    1498:	22 cf       	rjmp	.-444    	; 0x12de <BreakOutCollisions>
		
	} else {
	
		PongCollisions();
    149a:	33 ca       	rjmp	.-2970   	; 0x902 <PongCollisions>

0000149c <UpdateBall>:
}

//updates the ball coords
void UpdateBall(){

	if((collision == 1) || (collision == 2)){
    149c:	20 91 51 05 	lds	r18, 0x0551
    14a0:	30 91 52 05 	lds	r19, 0x0552
    14a4:	c9 01       	movw	r24, r18
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	02 97       	sbiw	r24, 0x02	; 2
    14aa:	10 f4       	brcc	.+4      	; 0x14b0 <UpdateBall+0x14>
		
		DeterminePaddleAngle(collision);
    14ac:	c9 01       	movw	r24, r18
    14ae:	e5 da       	rcall	.-2614   	; 0xa7a <DeterminePaddleAngle>
	}

	//if collides with end condition - do nothing
	if(collision == 5){
    14b0:	80 91 51 05 	lds	r24, 0x0551
    14b4:	90 91 52 05 	lds	r25, 0x0552
    14b8:	85 30       	cpi	r24, 0x05	; 5
    14ba:	91 05       	cpc	r25, r1
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <UpdateBall+0x2c>

		gameCondition = 0;
    14be:	10 92 9e 05 	sts	0x059E, r1
    14c2:	10 92 9d 05 	sts	0x059D, r1
    14c6:	1e c0       	rjmp	.+60     	; 0x1504 <UpdateBall+0x68>
	
	} else if (collision == 3){//top wall
    14c8:	83 30       	cpi	r24, 0x03	; 3
    14ca:	91 05       	cpc	r25, r1
    14cc:	19 f4       	brne	.+6      	; 0x14d4 <UpdateBall+0x38>

		ballDirection[1] = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <UpdateBall+0x42>

	} else if (collision == 4){//bottom wall
    14d4:	84 30       	cpi	r24, 0x04	; 4
    14d6:	91 05       	cpc	r25, r1
    14d8:	39 f4       	brne	.+14     	; 0x14e8 <UpdateBall+0x4c>

		ballDirection[1] = -1;
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	9f ef       	ldi	r25, 0xFF	; 255
    14de:	90 93 aa 05 	sts	0x05AA, r25
    14e2:	80 93 a9 05 	sts	0x05A9, r24
    14e6:	0e c0       	rjmp	.+28     	; 0x1504 <UpdateBall+0x68>

	} else if(collision == 6){//right wall - breakout
    14e8:	86 30       	cpi	r24, 0x06	; 6
    14ea:	91 05       	cpc	r25, r1
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <UpdateBall+0x58>
		
		ballDirection[0] = -1;
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	9f ef       	ldi	r25, 0xFF	; 255
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <UpdateBall+0x60>
	
	} else if (collision == 7){//left wall - breakout
    14f4:	07 97       	sbiw	r24, 0x07	; 7
    14f6:	31 f4       	brne	.+12     	; 0x1504 <UpdateBall+0x68>
	
		ballDirection[0] = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	90 93 a8 05 	sts	0x05A8, r25
    1500:	80 93 a7 05 	sts	0x05A7, r24
	} else if (collision == 8){//brick
		//destroy brick function that recalls this function with collision type
		//BrickBounce();
	}
	
	MoveBall();
    1504:	52 dc       	rcall	.-1884   	; 0xdaa <MoveBall>
	DetectCollision();
}
    1506:	be cf       	rjmp	.-132    	; 0x1484 <DetectCollision>

00001508 <UpdateBreakOut>:
	
	}
	
}

void UpdateBreakOut(){
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
	
	ClearBuffer();
    151c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <ClearBuffer>
	
	//draw paddle
	DrawFilledBox(paddleOne[0], paddleOne[2], paddleOne[1], paddleOne[3]);
    1520:	80 91 83 05 	lds	r24, 0x0583
    1524:	60 91 87 05 	lds	r22, 0x0587
    1528:	40 91 85 05 	lds	r20, 0x0585
    152c:	20 91 89 05 	lds	r18, 0x0589
    1530:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DrawFilledBox>
	
	//draw ball
	DrawFilledBox(ballPos[0], ballPos[2], ballPos[1], ballPos[3]);
    1534:	80 91 95 05 	lds	r24, 0x0595
    1538:	60 91 99 05 	lds	r22, 0x0599
    153c:	40 91 97 05 	lds	r20, 0x0597
    1540:	20 91 9b 05 	lds	r18, 0x059B
    1544:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DrawFilledBox>
    1548:	c0 e0       	ldi	r28, 0x00	; 0
    154a:	d0 e0       	ldi	r29, 0x00	; 0
    154c:	29 e5       	ldi	r18, 0x59	; 89
    154e:	a2 2e       	mov	r10, r18
    1550:	25 e0       	ldi	r18, 0x05	; 5
    1552:	b2 2e       	mov	r11, r18
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	e9 2e       	mov	r14, r25
    155c:	f1 2c       	mov	r15, r1
    155e:	00 e0       	ldi	r16, 0x00	; 0
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	2e c0       	rjmp	.+92     	; 0x15c0 <UpdateBreakOut+0xb8>
	int x2 = 0;
	int y1 = 1;
	int y2 = 0;
	while(i < INITIAL_NO_BRICKS){
		
		if(i >= 7){
    1564:	c7 30       	cpi	r28, 0x07	; 7
    1566:	d1 05       	cpc	r29, r1
    1568:	6c f0       	brlt	.+26     	; 0x1584 <UpdateBreakOut+0x7c>
		
			if((i%ROW_COUNT) == 0){
    156a:	ce 01       	movw	r24, r28
    156c:	67 e0       	ldi	r22, 0x07	; 7
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	98 d5       	rcall	.+2864   	; 0x20a2 <__divmodhi4>
    1572:	89 2b       	or	r24, r25
    1574:	39 f4       	brne	.+14     	; 0x1584 <UpdateBreakOut+0x7c>
			
				y1 = y2 + 2;
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	e8 2e       	mov	r14, r24
    157a:	f1 2c       	mov	r15, r1
    157c:	e0 0e       	add	r14, r16
    157e:	f1 1e       	adc	r15, r17
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
				x1 = 0;
				x2 = 0;
			}
		}
		
		x1 = x2 + 1;
    1584:	a9 01       	movw	r20, r18
    1586:	4f 5f       	subi	r20, 0xFF	; 255
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
		x2 = x1 + 9;
    158a:	1a e0       	ldi	r17, 0x0A	; 10
    158c:	c1 2e       	mov	r12, r17
    158e:	d1 2c       	mov	r13, r1
    1590:	c2 0e       	add	r12, r18
    1592:	d3 1e       	adc	r13, r19
		y2 = y1 + 3;
    1594:	87 01       	movw	r16, r14
    1596:	0d 5f       	subi	r16, 0xFD	; 253
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if(bricks[i] == 1){
    159a:	f5 01       	movw	r30, r10
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	31 f4       	brne	.+12     	; 0x15b0 <UpdateBreakOut+0xa8>
			
			DrawFilledBox(x1, x2, y1, y2);
    15a4:	84 2f       	mov	r24, r20
    15a6:	6c 2d       	mov	r22, r12
    15a8:	4e 2d       	mov	r20, r14
    15aa:	20 2f       	mov	r18, r16
    15ac:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DrawFilledBox>
		
		}
		
		x2 += 2;
    15b0:	96 01       	movw	r18, r12
    15b2:	2e 5f       	subi	r18, 0xFE	; 254
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
		i++;
    15b6:	21 96       	adiw	r28, 0x01	; 1
    15b8:	82 e0       	ldi	r24, 0x02	; 2
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a8 0e       	add	r10, r24
    15be:	b9 1e       	adc	r11, r25
	int i;
	int x1 = 0;
	int x2 = 0;
	int y1 = 1;
	int y2 = 0;
	while(i < INITIAL_NO_BRICKS){
    15c0:	c5 31       	cpi	r28, 0x15	; 21
    15c2:	d1 05       	cpc	r29, r1
    15c4:	7c f2       	brlt	.-98     	; 0x1564 <UpdateBreakOut+0x5c>
		//add in gap
	
	}
	
	//update the screen
	PresentBuffer();
    15c6:	0e 94 29 02 	call	0x452	; 0x452 <PresentBuffer>

}
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	df 90       	pop	r13
    15d8:	cf 90       	pop	r12
    15da:	bf 90       	pop	r11
    15dc:	af 90       	pop	r10
    15de:	08 95       	ret

000015e0 <BreakOut>:

void BreakOut(){

	InitBreakOutPositions();
    15e0:	91 dd       	rcall	.-1246   	; 0x1104 <InitBreakOutPositions>
	UpdateBreakOut();

}
    15e2:	92 cf       	rjmp	.-220    	; 0x1508 <UpdateBreakOut>

000015e4 <UpdatePong>:
	}
}

void UpdatePong(){

	ClearBuffer();
    15e4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <ClearBuffer>

	//draw paddle 1
	DrawFilledBox(paddleOne[0], paddleOne[2], paddleOne[1], paddleOne[3]);
    15e8:	80 91 83 05 	lds	r24, 0x0583
    15ec:	60 91 87 05 	lds	r22, 0x0587
    15f0:	40 91 85 05 	lds	r20, 0x0585
    15f4:	20 91 89 05 	lds	r18, 0x0589
    15f8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DrawFilledBox>

	//draw paddle 2
	DrawFilledBox(paddleTwo[0], paddleTwo[2], paddleTwo[1], paddleTwo[3]);
    15fc:	80 91 9f 05 	lds	r24, 0x059F
    1600:	60 91 a3 05 	lds	r22, 0x05A3
    1604:	40 91 a1 05 	lds	r20, 0x05A1
    1608:	20 91 a5 05 	lds	r18, 0x05A5
    160c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DrawFilledBox>
	
	//draw ball
	DrawFilledBox(ballPos[0], ballPos[2], ballPos[1], ballPos[3]);
    1610:	80 91 95 05 	lds	r24, 0x0595
    1614:	60 91 99 05 	lds	r22, 0x0599
    1618:	40 91 97 05 	lds	r20, 0x0597
    161c:	20 91 9b 05 	lds	r18, 0x059B
    1620:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DrawFilledBox>

	PresentBuffer();
    1624:	0c 94 29 02 	jmp	0x452	; 0x452 <PresentBuffer>

00001628 <UpdateGame>:

}

void UpdateGame(){
	
	if(currentGame == 1){
    1628:	80 91 bb 05 	lds	r24, 0x05BB
    162c:	90 91 bc 05 	lds	r25, 0x05BC
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	09 f4       	brne	.+2      	; 0x1636 <UpdateGame+0xe>
	
		UpdatePong();
    1634:	d7 cf       	rjmp	.-82     	; 0x15e4 <UpdatePong>
	
	} else {
	
		UpdateBreakOut();
    1636:	68 cf       	rjmp	.-304    	; 0x1508 <UpdateBreakOut>

00001638 <AverageADC>:
			paddleTwo[3] += -1;
		}
	}
}

double AverageADC(){
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
	
	double average = 0;
	int count = 0;
	
	ClearBuffer();
    1644:	0e 94 f7 01 	call	0x3ee	; 0x3ee <ClearBuffer>
    1648:	0f 2e       	mov	r0, r31
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	ef 2e       	mov	r14, r31
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	ff 2e       	mov	r15, r31
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	0f 2f       	mov	r16, r31
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	1f 2f       	mov	r17, r31
    165a:	f0 2d       	mov	r31, r0
    165c:	c0 e0       	ldi	r28, 0x00	; 0
    165e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(count < 5){
		
		average += ADCRead();
    1660:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ADCRead>
    1664:	aa 27       	eor	r26, r26
    1666:	97 fd       	sbrc	r25, 7
    1668:	a0 95       	com	r26
    166a:	ba 2f       	mov	r27, r26
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	29 d4       	rcall	.+2130   	; 0x1ec4 <__floatsisf>
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	c8 01       	movw	r24, r16
    1678:	b7 01       	movw	r22, r14
    167a:	25 d3       	rcall	.+1610   	; 0x1cc6 <__addsf3>
    167c:	7b 01       	movw	r14, r22
    167e:	8c 01       	movw	r16, r24
		
		count++;
    1680:	21 96       	adiw	r28, 0x01	; 1
	double average = 0;
	int count = 0;
	
	ClearBuffer();
	
	while(count < 5){
    1682:	c5 30       	cpi	r28, 0x05	; 5
    1684:	d1 05       	cpc	r29, r1
    1686:	61 f7       	brne	.-40     	; 0x1660 <AverageADC+0x28>
		
		count++;
	
	}
	
	average = average/5;
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 ea       	ldi	r20, 0xA0	; 160
    168e:	50 e4       	ldi	r21, 0x40	; 64
    1690:	7e d3       	rcall	.+1788   	; 0x1d8e <__divsf3>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 ec       	ldi	r19, 0xC0	; 192
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	54 e4       	ldi	r21, 0x44	; 68
    169a:	79 d3       	rcall	.+1778   	; 0x1d8e <__divsf3>
	
	average = (average/1023);
	
	return average;
}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	08 95       	ret

000016aa <WinMessage>:
}

void WinMessage(){
	
	//unsigned char * winner = "";
	LCDClear();
    16aa:	0e 94 c5 02 	call	0x58a	; 0x58a <LCDClear>
	unsigned char * wins = "Wins";
	LCDPosition((83 - 8*7)/2, 2);
    16ae:	8d e0       	ldi	r24, 0x0D	; 13
    16b0:	62 e0       	ldi	r22, 0x02	; 2
    16b2:	0e 94 07 03 	call	0x60e	; 0x60e <LCDPosition>
	
	if (gameWinner == 1){
    16b6:	80 91 57 05 	lds	r24, 0x0557
    16ba:	90 91 58 05 	lds	r25, 0x0558
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	19 f4       	brne	.+6      	; 0x16ca <WinMessage+0x20>
		
		unsigned char * winner = "Player 1";
		LCDString(winner);
    16c4:	85 e1       	ldi	r24, 0x15	; 21
    16c6:	93 e0       	ldi	r25, 0x03	; 3
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <WinMessage+0x28>
	} else if (gameWinner == 2){
    16ca:	02 97       	sbiw	r24, 0x02	; 2
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <WinMessage+0x2c>
	
		unsigned char *winner = "Player 2";
		LCDString(winner);
    16ce:	8e e1       	ldi	r24, 0x1E	; 30
    16d0:	93 e0       	ldi	r25, 0x03	; 3
    16d2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <LCDString>
		
	}
	//LCDString(winner);
	LCDPosition((83 - 4*7)/2, 3);
    16d6:	8b e1       	ldi	r24, 0x1B	; 27
    16d8:	63 e0       	ldi	r22, 0x03	; 3
    16da:	0e 94 07 03 	call	0x60e	; 0x60e <LCDPosition>
	LCDString(wins);
    16de:	87 e2       	ldi	r24, 0x27	; 39
    16e0:	93 e0       	ldi	r25, 0x03	; 3
    16e2:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <LCDString>

000016e6 <PlayGame>:
	
	ballDirection[0] = -1;
	ballDirection[1] = 0;
}

void PlayGame(int gameChoice){
    16e6:	4f 92       	push	r4
    16e8:	5f 92       	push	r5
    16ea:	6f 92       	push	r6
    16ec:	7f 92       	push	r7
    16ee:	8f 92       	push	r8
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
	
	currentGame = gameChoice;
    1706:	90 93 bc 05 	sts	0x05BC, r25
    170a:	80 93 bb 05 	sts	0x05BB, r24
	gameCondition = 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	90 93 9e 05 	sts	0x059E, r25
    1716:	80 93 9d 05 	sts	0x059D, r24
	unsigned char mux = 0;//pf1
	unsigned char interrupt = 1;
	ADCInitialise(mux, interrupt);
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	0e 94 3a 02 	call	0x474	; 0x474 <ADCInitialise>
	ballCount = 0;
    1722:	10 92 92 05 	sts	0x0592, r1
    1726:	10 92 91 05 	sts	0x0591, r1
	
	if(currentGame == 1){
    172a:	80 91 bb 05 	lds	r24, 0x05BB
    172e:	90 91 bc 05 	lds	r25, 0x05BC
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	49 f4       	brne	.+18     	; 0x174a <PlayGame+0x64>
		
		paddleOneCount = 0;
    1738:	10 92 50 03 	sts	0x0350, r1
    173c:	10 92 4f 03 	sts	0x034F, r1
		initPositions();
    1740:	0e 94 18 03 	call	0x630	; 0x630 <initPositions>
		initBallDirection();
    1744:	0e 94 8b 03 	call	0x716	; 0x716 <initBallDirection>
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <PlayGame+0x6a>
	
	} else if (currentGame == 2){
    174a:	02 97       	sbiw	r24, 0x02	; 2
    174c:	09 f4       	brne	.+2      	; 0x1750 <PlayGame+0x6a>
		
		BreakOut();
    174e:	48 df       	rcall	.-368    	; 0x15e0 <BreakOut>
	
	}

	UpdateGame();
    1750:	6b df       	rcall	.-298    	; 0x1628 <UpdateGame>
			paddleOneMovement = -1;
			UpdatePaddleOne();
			
		} else if(!(PIND & (1 << PD2))){

			paddleOneMovement = 1;
    1752:	c1 e0       	ldi	r28, 0x01	; 1
    1754:	d0 e0       	ldi	r29, 0x00	; 0
		DetectCollision();

		//keep track of paddle movements - button presses
		if(!(PIND & (1 << PD1))){

			paddleOneMovement = -1;
    1756:	44 24       	eor	r4, r4
    1758:	4a 94       	dec	r4
    175a:	54 2c       	mov	r5, r4
    175c:	30 e4       	ldi	r19, 0x40	; 64
    175e:	63 2e       	mov	r6, r19
    1760:	3c e9       	ldi	r19, 0x9C	; 156
    1762:	73 2e       	mov	r7, r19
    1764:	91 c0       	rjmp	.+290    	; 0x1888 <PlayGame+0x1a2>
	int speedReduce = 0;

	while(gameCondition != 0){

		//keep reading in ADC values - basically updates the speed adjuster
		speedReduce = MAX_SPEED - ballAngleSpeed;
    1766:	e0 90 32 03 	lds	r14, 0x0332
    176a:	f0 90 33 03 	lds	r15, 0x0333
    176e:	80 91 b9 05 	lds	r24, 0x05B9
    1772:	90 91 ba 05 	lds	r25, 0x05BA
    1776:	e8 1a       	sub	r14, r24
    1778:	f9 0a       	sbc	r15, r25
		adjustableSpeed = AverageADC();
    177a:	5e df       	rcall	.-324    	; 0x1638 <AverageADC>
    177c:	4b 01       	movw	r8, r22
    177e:	5c 01       	movw	r10, r24
    1780:	60 93 8d 05 	sts	0x058D, r22
    1784:	70 93 8e 05 	sts	0x058E, r23
    1788:	80 93 8f 05 	sts	0x058F, r24
    178c:	90 93 90 05 	sts	0x0590, r25
		speedReduce = speedReduce - (speedReduce*adjustableSpeed); 
    1790:	00 27       	eor	r16, r16
    1792:	f7 fc       	sbrc	r15, 7
    1794:	00 95       	com	r16
    1796:	10 2f       	mov	r17, r16
    1798:	c8 01       	movw	r24, r16
    179a:	b7 01       	movw	r22, r14
    179c:	93 d3       	rcall	.+1830   	; 0x1ec4 <__floatsisf>
    179e:	6b 01       	movw	r12, r22
    17a0:	7c 01       	movw	r14, r24
		
		//need to add in a speed adjuster for the CPU
		DetectCollision();
    17a2:	70 de       	rcall	.-800    	; 0x1484 <DetectCollision>

		//keep track of paddle movements - button presses
		if(!(PIND & (1 << PD1))){
    17a4:	49 99       	sbic	0x09, 1	; 9
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <PlayGame+0xcc>

			paddleOneMovement = -1;
    17a8:	50 92 8c 05 	sts	0x058C, r5
    17ac:	40 92 8b 05 	sts	0x058B, r4
    17b0:	06 c0       	rjmp	.+12     	; 0x17be <PlayGame+0xd8>
			UpdatePaddleOne();
			
		} else if(!(PIND & (1 << PD2))){
    17b2:	4a 99       	sbic	0x09, 2	; 9
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <PlayGame+0xdc>

			paddleOneMovement = 1;
    17b6:	d0 93 8c 05 	sts	0x058C, r29
    17ba:	c0 93 8b 05 	sts	0x058B, r28
			UpdatePaddleOne();
    17be:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UpdatePaddleOne>
		}
        
        //prob isnt needed
		if(!(PIND & (1 << PD1)) && !(PIND & (1 << PD2))){
    17c2:	49 99       	sbic	0x09, 1	; 9
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <PlayGame+0xf4>
    17c6:	4a 99       	sbic	0x09, 2	; 9
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <PlayGame+0xf4>
			gameWinner = 1;
    17ca:	d0 93 58 05 	sts	0x0558, r29
    17ce:	c0 93 57 05 	sts	0x0557, r28
			gameCondition = 0;
    17d2:	10 92 9e 05 	sts	0x059E, r1
    17d6:	10 92 9d 05 	sts	0x059D, r1

		}

		if(ballCount >= speedReduce){
    17da:	00 91 91 05 	lds	r16, 0x0591
    17de:	10 91 92 05 	lds	r17, 0x0592
    17e2:	c7 01       	movw	r24, r14
    17e4:	b6 01       	movw	r22, r12
    17e6:	a5 01       	movw	r20, r10
    17e8:	94 01       	movw	r18, r8
    17ea:	f8 d3       	rcall	.+2032   	; 0x1fdc <__mulsf3>
    17ec:	9b 01       	movw	r18, r22
    17ee:	ac 01       	movw	r20, r24
    17f0:	c7 01       	movw	r24, r14
    17f2:	b6 01       	movw	r22, r12
    17f4:	67 d2       	rcall	.+1230   	; 0x1cc4 <__subsf3>
    17f6:	33 d3       	rcall	.+1638   	; 0x1e5e <__fixsfsi>
    17f8:	06 17       	cp	r16, r22
    17fa:	17 07       	cpc	r17, r23
    17fc:	2c f0       	brlt	.+10     	; 0x1808 <PlayGame+0x122>
			
			UpdateBall();
    17fe:	4e de       	rcall	.-868    	; 0x149c <UpdateBall>
			ballCount = 0;
    1800:	10 92 92 05 	sts	0x0592, r1
    1804:	10 92 91 05 	sts	0x0591, r1
			//usb_serial_putchar( speedReduce +'0');

		}
		
		if(currentGame == 1){
    1808:	80 91 bb 05 	lds	r24, 0x05BB
    180c:	90 91 bc 05 	lds	r25, 0x05BC
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	c9 f4       	brne	.+50     	; 0x1846 <PlayGame+0x160>
		
			if(paddleOneCount > PADDLE_SPEED){
    1814:	20 91 4f 03 	lds	r18, 0x034F
    1818:	30 91 50 03 	lds	r19, 0x0350
    181c:	80 91 34 03 	lds	r24, 0x0334
    1820:	90 91 35 03 	lds	r25, 0x0335
    1824:	82 17       	cp	r24, r18
    1826:	93 07       	cpc	r25, r19
    1828:	2c f4       	brge	.+10     	; 0x1834 <PlayGame+0x14e>
			
				UpdatePaddleTwo();
    182a:	2a d8       	rcall	.-4012   	; 0x880 <UpdatePaddleTwo>
				paddleOneCount = 0;
    182c:	10 92 50 03 	sts	0x0350, r1
    1830:	10 92 4f 03 	sts	0x034F, r1
		
			}
			paddleOneCount++;
    1834:	80 91 4f 03 	lds	r24, 0x034F
    1838:	90 91 50 03 	lds	r25, 0x0350
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	90 93 50 03 	sts	0x0350, r25
    1842:	80 93 4f 03 	sts	0x034F, r24
		
		}

		if(currentGame == 2){
    1846:	80 91 bb 05 	lds	r24, 0x05BB
    184a:	90 91 bc 05 	lds	r25, 0x05BC
    184e:	02 97       	sbiw	r24, 0x02	; 2
    1850:	71 f4       	brne	.+28     	; 0x186e <PlayGame+0x188>
			
			if(brickCount == INITIAL_NO_BRICKS){
    1852:	80 91 93 05 	lds	r24, 0x0593
    1856:	90 91 94 05 	lds	r25, 0x0594
    185a:	45 97       	sbiw	r24, 0x15	; 21
    185c:	41 f4       	brne	.+16     	; 0x186e <PlayGame+0x188>
				
				gameCondition = 0;
    185e:	10 92 9e 05 	sts	0x059E, r1
    1862:	10 92 9d 05 	sts	0x059D, r1
				
				gameWinner = 1;
    1866:	d0 93 58 05 	sts	0x0558, r29
    186a:	c0 93 57 05 	sts	0x0557, r28
			}
		}
		
		UpdateGame();
    186e:	dc de       	rcall	.-584    	; 0x1628 <UpdateGame>
    1870:	c3 01       	movw	r24, r6
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <PlayGame+0x18c>
		_delay_ms(10);
		ballCount++;
    1876:	80 91 91 05 	lds	r24, 0x0591
    187a:	90 91 92 05 	lds	r25, 0x0592
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	90 93 92 05 	sts	0x0592, r25
    1884:	80 93 91 05 	sts	0x0591, r24
	UpdateGame();
	//initTimer();

	int speedReduce = 0;

	while(gameCondition != 0){
    1888:	80 91 9d 05 	lds	r24, 0x059D
    188c:	90 91 9e 05 	lds	r25, 0x059E
    1890:	89 2b       	or	r24, r25
    1892:	09 f0       	breq	.+2      	; 0x1896 <PlayGame+0x1b0>
    1894:	68 cf       	rjmp	.-304    	; 0x1766 <PlayGame+0x80>
		_delay_ms(10);
		ballCount++;
	}
	
	//cli();
	ClearBuffer();
    1896:	0e 94 f7 01 	call	0x3ee	; 0x3ee <ClearBuffer>
	WinMessage();
    189a:	07 df       	rcall	.-498    	; 0x16aa <WinMessage>
	GameOverScreen();
    189c:	0e 94 a8 03 	call	0x750	; 0x750 <GameOverScreen>
}
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	bf 90       	pop	r11
    18b2:	af 90       	pop	r10
    18b4:	9f 90       	pop	r9
    18b6:	8f 90       	pop	r8
    18b8:	7f 90       	pop	r7
    18ba:	6f 90       	pop	r6
    18bc:	5f 90       	pop	r5
    18be:	4f 90       	pop	r4
    18c0:	08 95       	ret

000018c2 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    18c8:	80 ea       	ldi	r24, 0xA0	; 160
    18ca:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    18ce:	82 e1       	ldi	r24, 0x12	; 18
    18d0:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    18d2:	09 b4       	in	r0, 0x29	; 41
    18d4:	00 fe       	sbrs	r0, 0
    18d6:	fd cf       	rjmp	.-6      	; 0x18d2 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
    18d8:	80 e9       	ldi	r24, 0x90	; 144
    18da:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    18de:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    18e2:	10 92 55 03 	sts	0x0355, r1
	cdc_line_rtsdtr = 0;
    18e6:	10 92 56 03 	sts	0x0356, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    18ea:	8c e0       	ldi	r24, 0x0C	; 12
    18ec:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    18f0:	78 94       	sei
}
    18f2:	08 95       	ret

000018f4 <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
    18f4:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    18f6:	80 91 55 03 	lds	r24, 0x0355
    18fa:	88 23       	and	r24, r24
    18fc:	d9 f1       	breq	.+118    	; 0x1974 <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    18fe:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1900:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1902:	84 e0       	ldi	r24, 0x04	; 4
    1904:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1908:	80 91 58 03 	lds	r24, 0x0358
    190c:	88 23       	and	r24, r24
    190e:	41 f0       	breq	.+16     	; 0x1920 <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
    1910:	80 91 e8 00 	lds	r24, 0x00E8
    1914:	85 fd       	sbrc	r24, 5
    1916:	02 c0       	rjmp	.+4      	; 0x191c <usb_serial_putchar+0x28>
			SREG = intr_state;
    1918:	2f bf       	out	0x3f, r18	; 63
    191a:	12 c0       	rjmp	.+36     	; 0x1940 <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
    191c:	10 92 58 03 	sts	0x0358, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1920:	90 91 e4 00 	lds	r25, 0x00E4
    1924:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1926:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1928:	80 91 e8 00 	lds	r24, 0x00E8
    192c:	85 fd       	sbrc	r24, 5
    192e:	13 c0       	rjmp	.+38     	; 0x1956 <usb_serial_putchar+0x62>
		SREG = intr_state;
    1930:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1932:	80 91 e4 00 	lds	r24, 0x00E4
    1936:	89 17       	cp	r24, r25
    1938:	29 f4       	brne	.+10     	; 0x1944 <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 93 58 03 	sts	0x0358, r24
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1944:	80 91 55 03 	lds	r24, 0x0355
    1948:	88 23       	and	r24, r24
    194a:	a1 f0       	breq	.+40     	; 0x1974 <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
    194c:	2f b7       	in	r18, 0x3f	; 63
		cli();
    194e:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1950:	30 93 e9 00 	sts	0x00E9, r19
    1954:	e9 cf       	rjmp	.-46     	; 0x1928 <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
    1956:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    195a:	80 91 e8 00 	lds	r24, 0x00E8
    195e:	85 fd       	sbrc	r24, 5
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <usb_serial_putchar+0x74>
    1962:	8a e3       	ldi	r24, 0x3A	; 58
    1964:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1968:	85 e0       	ldi	r24, 0x05	; 5
    196a:	80 93 57 03 	sts	0x0357, r24
	SREG = intr_state;
    196e:	2f bf       	out	0x3f, r18	; 63
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	08 95       	ret
	return 0;
    1974:	8f ef       	ldi	r24, 0xFF	; 255
}
    1976:	08 95       	ret

00001978 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
    1986:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
    198a:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
    198e:	98 2f       	mov	r25, r24
    1990:	83 ff       	sbrs	r24, 3
    1992:	11 c0       	rjmp	.+34     	; 0x19b6 <__vector_10+0x3e>
		UENUM = 0;
    1994:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
    199e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    19a2:	82 e1       	ldi	r24, 0x12	; 18
    19a4:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
    19a8:	88 e0       	ldi	r24, 0x08	; 8
    19aa:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
    19ae:	10 92 55 03 	sts	0x0355, r1
		cdc_line_rtsdtr = 0;
    19b2:	10 92 56 03 	sts	0x0356, r1
        }
	if (intbits & (1<<SOFI)) {
    19b6:	92 ff       	sbrs	r25, 2
    19b8:	13 c0       	rjmp	.+38     	; 0x19e0 <__vector_10+0x68>
		if (usb_configuration) {
    19ba:	80 91 55 03 	lds	r24, 0x0355
    19be:	88 23       	and	r24, r24
    19c0:	79 f0       	breq	.+30     	; 0x19e0 <__vector_10+0x68>
			t = transmit_flush_timer;
    19c2:	80 91 57 03 	lds	r24, 0x0357
			if (t) {
    19c6:	88 23       	and	r24, r24
    19c8:	59 f0       	breq	.+22     	; 0x19e0 <__vector_10+0x68>
				transmit_flush_timer = --t;
    19ca:	81 50       	subi	r24, 0x01	; 1
    19cc:	80 93 57 03 	sts	0x0357, r24
				if (!t) {
    19d0:	88 23       	and	r24, r24
    19d2:	31 f4       	brne	.+12     	; 0x19e0 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
    19d4:	84 e0       	ldi	r24, 0x04	; 4
    19d6:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    19da:	8a e3       	ldi	r24, 0x3A	; 58
    19dc:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	18 95       	reti

000019ee <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    19ee:	1f 92       	push	r1
    19f0:	0f 92       	push	r0
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	0f 92       	push	r0
    19f6:	11 24       	eor	r1, r1
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	2f 93       	push	r18
    19fe:	3f 93       	push	r19
    1a00:	4f 93       	push	r20
    1a02:	5f 93       	push	r21
    1a04:	6f 93       	push	r22
    1a06:	7f 93       	push	r23
    1a08:	8f 93       	push	r24
    1a0a:	9f 93       	push	r25
    1a0c:	af 93       	push	r26
    1a0e:	bf 93       	push	r27
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1a14:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1a18:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1a1c:	83 ff       	sbrs	r24, 3
    1a1e:	3c c1       	rjmp	.+632    	; 0x1c98 <__vector_11+0x2aa>
                bmRequestType = UEDATX;
    1a20:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
    1a24:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
    1a28:	80 91 f1 00 	lds	r24, 0x00F1
    1a2c:	68 2f       	mov	r22, r24
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
    1a30:	20 91 f1 00 	lds	r18, 0x00F1
    1a34:	92 2f       	mov	r25, r18
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	68 2b       	or	r22, r24
    1a3a:	79 2b       	or	r23, r25
                wIndex = UEDATX;
    1a3c:	80 91 f1 00 	lds	r24, 0x00F1
    1a40:	a8 2f       	mov	r26, r24
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
    1a44:	20 91 f1 00 	lds	r18, 0x00F1
    1a48:	92 2f       	mov	r25, r18
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	a8 2b       	or	r26, r24
    1a4e:	b9 2b       	or	r27, r25
                wLength = UEDATX;
    1a50:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
    1a54:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1a58:	82 ef       	ldi	r24, 0xF2	; 242
    1a5a:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1a5e:	36 30       	cpi	r19, 0x06	; 6
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <__vector_11+0x76>
    1a62:	5a c0       	rjmp	.+180    	; 0x1b18 <__vector_11+0x12a>
    1a64:	23 eb       	ldi	r18, 0xB3	; 179
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	a9 01       	movw	r20, r18
    1a6a:	45 50       	subi	r20, 0x05	; 5
    1a6c:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
    1a6e:	f9 01       	movw	r30, r18
    1a70:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
    1a72:	85 91       	lpm	r24, Z+
    1a74:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    1a76:	86 17       	cp	r24, r22
    1a78:	97 07       	cpc	r25, r23
    1a7a:	01 f5       	brne	.+64     	; 0x1abc <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    1a7c:	fa 01       	movw	r30, r20
    1a7e:	85 91       	lpm	r24, Z+
    1a80:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    1a82:	8a 17       	cp	r24, r26
    1a84:	9b 07       	cpc	r25, r27
    1a86:	d1 f4       	brne	.+52     	; 0x1abc <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    1a88:	9a 01       	movw	r18, r20
    1a8a:	2e 5f       	subi	r18, 0xFE	; 254
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1a8e:	f9 01       	movw	r30, r18
    1a90:	65 91       	lpm	r22, Z+
    1a92:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    1a94:	2e 5f       	subi	r18, 0xFE	; 254
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	f9 01       	movw	r30, r18
    1a9a:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    1a9c:	21 2f       	mov	r18, r17
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1aa0:	90 2f       	mov	r25, r16
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	28 2b       	or	r18, r24
    1aa6:	39 2b       	or	r19, r25
    1aa8:	2f 3f       	cpi	r18, 0xFF	; 255
    1aaa:	31 05       	cpc	r19, r1
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <__vector_11+0xc6>
    1aae:	10 f0       	brcs	.+4      	; 0x1ab4 <__vector_11+0xc6>
    1ab0:	2f ef       	ldi	r18, 0xFF	; 255
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	24 17       	cp	r18, r20
    1ab6:	58 f4       	brcc	.+22     	; 0x1ace <__vector_11+0xe0>
    1ab8:	42 2f       	mov	r20, r18
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <__vector_11+0xe0>
    1abc:	29 5f       	subi	r18, 0xF9	; 249
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac0:	49 5f       	subi	r20, 0xF9	; 249
    1ac2:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	2d 3d       	cpi	r18, 0xDD	; 221
    1ac8:	3f 07       	cpc	r19, r31
    1aca:	89 f6       	brne	.-94     	; 0x1a6e <__vector_11+0x80>
    1acc:	e5 c0       	rjmp	.+458    	; 0x1c98 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ace:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1ad0:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	c9 01       	movw	r24, r18
    1ada:	85 70       	andi	r24, 0x05	; 5
    1adc:	90 70       	andi	r25, 0x00	; 0
    1ade:	89 2b       	or	r24, r25
    1ae0:	b9 f3       	breq	.-18     	; 0x1ad0 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
    1ae2:	22 fd       	sbrc	r18, 2
    1ae4:	dc c0       	rjmp	.+440    	; 0x1c9e <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1ae6:	34 2f       	mov	r19, r20
    1ae8:	41 31       	cpi	r20, 0x11	; 17
    1aea:	08 f0       	brcs	.+2      	; 0x1aee <__vector_11+0x100>
    1aec:	30 e1       	ldi	r19, 0x10	; 16
    1aee:	23 2f       	mov	r18, r19
    1af0:	cb 01       	movw	r24, r22
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <__vector_11+0x112>
				for (i = n; i; i--) {
    1af4:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	e4 91       	lpm	r30, Z+
    1afa:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1afe:	21 50       	subi	r18, 0x01	; 1
    1b00:	22 23       	and	r18, r18
    1b02:	c1 f7       	brne	.-16     	; 0x1af4 <__vector_11+0x106>
    1b04:	63 0f       	add	r22, r19
    1b06:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1b08:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b0a:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1b0e:	44 23       	and	r20, r20
    1b10:	f9 f6       	brne	.-66     	; 0x1ad0 <__vector_11+0xe2>
    1b12:	30 31       	cpi	r19, 0x10	; 16
    1b14:	e9 f2       	breq	.-70     	; 0x1ad0 <__vector_11+0xe2>
    1b16:	c3 c0       	rjmp	.+390    	; 0x1c9e <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1b18:	35 30       	cpi	r19, 0x05	; 5
    1b1a:	61 f4       	brne	.+24     	; 0x1b34 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b1c:	8e ef       	ldi	r24, 0xFE	; 254
    1b1e:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b22:	80 91 e8 00 	lds	r24, 0x00E8
    1b26:	80 ff       	sbrs	r24, 0
    1b28:	fc cf       	rjmp	.-8      	; 0x1b22 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1b2a:	86 2f       	mov	r24, r22
    1b2c:	80 68       	ori	r24, 0x80	; 128
    1b2e:	80 93 e3 00 	sts	0x00E3, r24
    1b32:	b5 c0       	rjmp	.+362    	; 0x1c9e <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1b34:	39 30       	cpi	r19, 0x09	; 9
    1b36:	51 f5       	brne	.+84     	; 0x1b8c <__vector_11+0x19e>
    1b38:	44 23       	and	r20, r20
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <__vector_11+0x150>
    1b3c:	ad c0       	rjmp	.+346    	; 0x1c98 <__vector_11+0x2aa>
			usb_configuration = wValue;
    1b3e:	60 93 55 03 	sts	0x0355, r22
			cdc_line_rtsdtr = 0;
    1b42:	10 92 56 03 	sts	0x0356, r1
			transmit_flush_timer = 0;
    1b46:	10 92 57 03 	sts	0x0357, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b4a:	8e ef       	ldi	r24, 0xFE	; 254
    1b4c:	80 93 e8 00 	sts	0x00E8, r24
    1b50:	86 ed       	ldi	r24, 0xD6	; 214
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1b56:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	e4 91       	lpm	r30, Z+
				UECONX = en;
    1b60:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    1b64:	ee 23       	and	r30, r30
    1b66:	69 f0       	breq	.+26     	; 0x1b82 <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
    1b68:	ac 01       	movw	r20, r24
    1b6a:	4f 5f       	subi	r20, 0xFF	; 255
    1b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6e:	fc 01       	movw	r30, r24
    1b70:	84 91       	lpm	r24, Z+
    1b72:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    1b76:	ca 01       	movw	r24, r20
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	fa 01       	movw	r30, r20
    1b7c:	34 91       	lpm	r19, Z+
    1b7e:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1b82:	2f 5f       	subi	r18, 0xFF	; 255
    1b84:	25 30       	cpi	r18, 0x05	; 5
    1b86:	39 f7       	brne	.-50     	; 0x1b56 <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1b88:	8e e1       	ldi	r24, 0x1E	; 30
    1b8a:	81 c0       	rjmp	.+258    	; 0x1c8e <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1b8c:	38 30       	cpi	r19, 0x08	; 8
    1b8e:	61 f4       	brne	.+24     	; 0x1ba8 <__vector_11+0x1ba>
    1b90:	40 38       	cpi	r20, 0x80	; 128
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <__vector_11+0x1a8>
    1b94:	81 c0       	rjmp	.+258    	; 0x1c98 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b96:	80 91 e8 00 	lds	r24, 0x00E8
    1b9a:	80 ff       	sbrs	r24, 0
    1b9c:	fc cf       	rjmp	.-8      	; 0x1b96 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1b9e:	80 91 55 03 	lds	r24, 0x0355
    1ba2:	80 93 f1 00 	sts	0x00F1, r24
    1ba6:	50 c0       	rjmp	.+160    	; 0x1c48 <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1ba8:	31 32       	cpi	r19, 0x21	; 33
    1baa:	89 f4       	brne	.+34     	; 0x1bce <__vector_11+0x1e0>
    1bac:	41 3a       	cpi	r20, 0xA1	; 161
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <__vector_11+0x1c4>
    1bb0:	73 c0       	rjmp	.+230    	; 0x1c98 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1bb2:	80 91 e8 00 	lds	r24, 0x00E8
    1bb6:	80 ff       	sbrs	r24, 0
    1bb8:	fc cf       	rjmp	.-8      	; 0x1bb2 <__vector_11+0x1c4>
    1bba:	e4 e4       	ldi	r30, 0x44	; 68
    1bbc:	f3 e0       	ldi	r31, 0x03	; 3
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1bbe:	81 91       	ld	r24, Z+
    1bc0:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	eb 34       	cpi	r30, 0x4B	; 75
    1bc8:	f8 07       	cpc	r31, r24
    1bca:	c9 f7       	brne	.-14     	; 0x1bbe <__vector_11+0x1d0>
    1bcc:	3d c0       	rjmp	.+122    	; 0x1c48 <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1bce:	30 32       	cpi	r19, 0x20	; 32
    1bd0:	a1 f4       	brne	.+40     	; 0x1bfa <__vector_11+0x20c>
    1bd2:	41 32       	cpi	r20, 0x21	; 33
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <__vector_11+0x1ea>
    1bd6:	60 c0       	rjmp	.+192    	; 0x1c98 <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1bd8:	80 91 e8 00 	lds	r24, 0x00E8
    1bdc:	82 ff       	sbrs	r24, 2
    1bde:	fc cf       	rjmp	.-8      	; 0x1bd8 <__vector_11+0x1ea>
    1be0:	e4 e4       	ldi	r30, 0x44	; 68
    1be2:	f3 e0       	ldi	r31, 0x03	; 3
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1be4:	80 91 f1 00 	lds	r24, 0x00F1
    1be8:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	eb 34       	cpi	r30, 0x4B	; 75
    1bee:	f8 07       	cpc	r31, r24
    1bf0:	c9 f7       	brne	.-14     	; 0x1be4 <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1bf2:	8b ef       	ldi	r24, 0xFB	; 251
    1bf4:	80 93 e8 00 	sts	0x00E8, r24
    1bf8:	27 c0       	rjmp	.+78     	; 0x1c48 <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1bfa:	32 32       	cpi	r19, 0x22	; 34
    1bfc:	51 f4       	brne	.+20     	; 0x1c12 <__vector_11+0x224>
    1bfe:	41 32       	cpi	r20, 0x21	; 33
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <__vector_11+0x216>
    1c02:	4a c0       	rjmp	.+148    	; 0x1c98 <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
    1c04:	60 93 56 03 	sts	0x0356, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c08:	80 91 e8 00 	lds	r24, 0x00E8
    1c0c:	80 ff       	sbrs	r24, 0
    1c0e:	fc cf       	rjmp	.-8      	; 0x1c08 <__vector_11+0x21a>
    1c10:	1b c0       	rjmp	.+54     	; 0x1c48 <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1c12:	33 23       	and	r19, r19
    1c14:	e9 f4       	brne	.+58     	; 0x1c50 <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c16:	80 91 e8 00 	lds	r24, 0x00E8
    1c1a:	80 ff       	sbrs	r24, 0
    1c1c:	fc cf       	rjmp	.-8      	; 0x1c16 <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1c1e:	42 38       	cpi	r20, 0x82	; 130
    1c20:	11 f0       	breq	.+4      	; 0x1c26 <__vector_11+0x238>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <__vector_11+0x252>
				UENUM = wIndex;
    1c26:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    1c2a:	80 91 eb 00 	lds	r24, 0x00EB
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	25 e0       	ldi	r18, 0x05	; 5
    1c32:	96 95       	lsr	r25
    1c34:	87 95       	ror	r24
    1c36:	2a 95       	dec	r18
    1c38:	e1 f7       	brne	.-8      	; 0x1c32 <__vector_11+0x244>
    1c3a:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    1c3c:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    1c40:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    1c44:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c48:	8e ef       	ldi	r24, 0xFE	; 254
    1c4a:	80 93 e8 00 	sts	0x00E8, r24
    1c4e:	27 c0       	rjmp	.+78     	; 0x1c9e <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1c50:	31 30       	cpi	r19, 0x01	; 1
    1c52:	11 f0       	breq	.+4      	; 0x1c58 <__vector_11+0x26a>
    1c54:	33 30       	cpi	r19, 0x03	; 3
    1c56:	01 f5       	brne	.+64     	; 0x1c98 <__vector_11+0x2aa>
    1c58:	42 30       	cpi	r20, 0x02	; 2
    1c5a:	f1 f4       	brne	.+60     	; 0x1c98 <__vector_11+0x2aa>
    1c5c:	67 2b       	or	r22, r23
    1c5e:	e1 f4       	brne	.+56     	; 0x1c98 <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    1c60:	2a 2f       	mov	r18, r26
    1c62:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1c64:	82 2f       	mov	r24, r18
    1c66:	81 50       	subi	r24, 0x01	; 1
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	b0 f4       	brcc	.+44     	; 0x1c98 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c6c:	8e ef       	ldi	r24, 0xFE	; 254
    1c6e:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1c72:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    1c76:	33 30       	cpi	r19, 0x03	; 3
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1c7a:	89 e1       	ldi	r24, 0x19	; 25
    1c7c:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <__vector_11+0x29c>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	2a 95       	dec	r18
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <__vector_11+0x298>
    1c8e:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    1c92:	10 92 ea 00 	sts	0x00EA, r1
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1c98:	81 e2       	ldi	r24, 0x21	; 33
    1c9a:	80 93 eb 00 	sts	0x00EB, r24
}
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <__subsf3>:
    1cc4:	50 58       	subi	r21, 0x80	; 128

00001cc6 <__addsf3>:
    1cc6:	bb 27       	eor	r27, r27
    1cc8:	aa 27       	eor	r26, r26
    1cca:	0e d0       	rcall	.+28     	; 0x1ce8 <__addsf3x>
    1ccc:	4d c1       	rjmp	.+666    	; 0x1f68 <__fp_round>
    1cce:	3e d1       	rcall	.+636    	; 0x1f4c <__fp_pscA>
    1cd0:	30 f0       	brcs	.+12     	; 0x1cde <__addsf3+0x18>
    1cd2:	43 d1       	rcall	.+646    	; 0x1f5a <__fp_pscB>
    1cd4:	20 f0       	brcs	.+8      	; 0x1cde <__addsf3+0x18>
    1cd6:	31 f4       	brne	.+12     	; 0x1ce4 <__addsf3+0x1e>
    1cd8:	9f 3f       	cpi	r25, 0xFF	; 255
    1cda:	11 f4       	brne	.+4      	; 0x1ce0 <__addsf3+0x1a>
    1cdc:	1e f4       	brtc	.+6      	; 0x1ce4 <__addsf3+0x1e>
    1cde:	33 c1       	rjmp	.+614    	; 0x1f46 <__fp_nan>
    1ce0:	0e f4       	brtc	.+2      	; 0x1ce4 <__addsf3+0x1e>
    1ce2:	e0 95       	com	r30
    1ce4:	e7 fb       	bst	r30, 7
    1ce6:	29 c1       	rjmp	.+594    	; 0x1f3a <__fp_inf>

00001ce8 <__addsf3x>:
    1ce8:	e9 2f       	mov	r30, r25
    1cea:	4f d1       	rcall	.+670    	; 0x1f8a <__fp_split3>
    1cec:	80 f3       	brcs	.-32     	; 0x1cce <__addsf3+0x8>
    1cee:	ba 17       	cp	r27, r26
    1cf0:	62 07       	cpc	r22, r18
    1cf2:	73 07       	cpc	r23, r19
    1cf4:	84 07       	cpc	r24, r20
    1cf6:	95 07       	cpc	r25, r21
    1cf8:	18 f0       	brcs	.+6      	; 0x1d00 <__addsf3x+0x18>
    1cfa:	71 f4       	brne	.+28     	; 0x1d18 <__addsf3x+0x30>
    1cfc:	9e f5       	brtc	.+102    	; 0x1d64 <__addsf3x+0x7c>
    1cfe:	67 c1       	rjmp	.+718    	; 0x1fce <__fp_zero>
    1d00:	0e f4       	brtc	.+2      	; 0x1d04 <__addsf3x+0x1c>
    1d02:	e0 95       	com	r30
    1d04:	0b 2e       	mov	r0, r27
    1d06:	ba 2f       	mov	r27, r26
    1d08:	a0 2d       	mov	r26, r0
    1d0a:	0b 01       	movw	r0, r22
    1d0c:	b9 01       	movw	r22, r18
    1d0e:	90 01       	movw	r18, r0
    1d10:	0c 01       	movw	r0, r24
    1d12:	ca 01       	movw	r24, r20
    1d14:	a0 01       	movw	r20, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	ff 27       	eor	r31, r31
    1d1a:	59 1b       	sub	r21, r25
    1d1c:	99 f0       	breq	.+38     	; 0x1d44 <__addsf3x+0x5c>
    1d1e:	59 3f       	cpi	r21, 0xF9	; 249
    1d20:	50 f4       	brcc	.+20     	; 0x1d36 <__addsf3x+0x4e>
    1d22:	50 3e       	cpi	r21, 0xE0	; 224
    1d24:	68 f1       	brcs	.+90     	; 0x1d80 <__addsf3x+0x98>
    1d26:	1a 16       	cp	r1, r26
    1d28:	f0 40       	sbci	r31, 0x00	; 0
    1d2a:	a2 2f       	mov	r26, r18
    1d2c:	23 2f       	mov	r18, r19
    1d2e:	34 2f       	mov	r19, r20
    1d30:	44 27       	eor	r20, r20
    1d32:	58 5f       	subi	r21, 0xF8	; 248
    1d34:	f3 cf       	rjmp	.-26     	; 0x1d1c <__addsf3x+0x34>
    1d36:	46 95       	lsr	r20
    1d38:	37 95       	ror	r19
    1d3a:	27 95       	ror	r18
    1d3c:	a7 95       	ror	r26
    1d3e:	f0 40       	sbci	r31, 0x00	; 0
    1d40:	53 95       	inc	r21
    1d42:	c9 f7       	brne	.-14     	; 0x1d36 <__addsf3x+0x4e>
    1d44:	7e f4       	brtc	.+30     	; 0x1d64 <__addsf3x+0x7c>
    1d46:	1f 16       	cp	r1, r31
    1d48:	ba 0b       	sbc	r27, r26
    1d4a:	62 0b       	sbc	r22, r18
    1d4c:	73 0b       	sbc	r23, r19
    1d4e:	84 0b       	sbc	r24, r20
    1d50:	ba f0       	brmi	.+46     	; 0x1d80 <__addsf3x+0x98>
    1d52:	91 50       	subi	r25, 0x01	; 1
    1d54:	a1 f0       	breq	.+40     	; 0x1d7e <__addsf3x+0x96>
    1d56:	ff 0f       	add	r31, r31
    1d58:	bb 1f       	adc	r27, r27
    1d5a:	66 1f       	adc	r22, r22
    1d5c:	77 1f       	adc	r23, r23
    1d5e:	88 1f       	adc	r24, r24
    1d60:	c2 f7       	brpl	.-16     	; 0x1d52 <__addsf3x+0x6a>
    1d62:	0e c0       	rjmp	.+28     	; 0x1d80 <__addsf3x+0x98>
    1d64:	ba 0f       	add	r27, r26
    1d66:	62 1f       	adc	r22, r18
    1d68:	73 1f       	adc	r23, r19
    1d6a:	84 1f       	adc	r24, r20
    1d6c:	48 f4       	brcc	.+18     	; 0x1d80 <__addsf3x+0x98>
    1d6e:	87 95       	ror	r24
    1d70:	77 95       	ror	r23
    1d72:	67 95       	ror	r22
    1d74:	b7 95       	ror	r27
    1d76:	f7 95       	ror	r31
    1d78:	9e 3f       	cpi	r25, 0xFE	; 254
    1d7a:	08 f0       	brcs	.+2      	; 0x1d7e <__addsf3x+0x96>
    1d7c:	b3 cf       	rjmp	.-154    	; 0x1ce4 <__addsf3+0x1e>
    1d7e:	93 95       	inc	r25
    1d80:	88 0f       	add	r24, r24
    1d82:	08 f0       	brcs	.+2      	; 0x1d86 <__addsf3x+0x9e>
    1d84:	99 27       	eor	r25, r25
    1d86:	ee 0f       	add	r30, r30
    1d88:	97 95       	ror	r25
    1d8a:	87 95       	ror	r24
    1d8c:	08 95       	ret

00001d8e <__divsf3>:
    1d8e:	0c d0       	rcall	.+24     	; 0x1da8 <__divsf3x>
    1d90:	eb c0       	rjmp	.+470    	; 0x1f68 <__fp_round>
    1d92:	e3 d0       	rcall	.+454    	; 0x1f5a <__fp_pscB>
    1d94:	40 f0       	brcs	.+16     	; 0x1da6 <__divsf3+0x18>
    1d96:	da d0       	rcall	.+436    	; 0x1f4c <__fp_pscA>
    1d98:	30 f0       	brcs	.+12     	; 0x1da6 <__divsf3+0x18>
    1d9a:	21 f4       	brne	.+8      	; 0x1da4 <__divsf3+0x16>
    1d9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9e:	19 f0       	breq	.+6      	; 0x1da6 <__divsf3+0x18>
    1da0:	cc c0       	rjmp	.+408    	; 0x1f3a <__fp_inf>
    1da2:	51 11       	cpse	r21, r1
    1da4:	15 c1       	rjmp	.+554    	; 0x1fd0 <__fp_szero>
    1da6:	cf c0       	rjmp	.+414    	; 0x1f46 <__fp_nan>

00001da8 <__divsf3x>:
    1da8:	f0 d0       	rcall	.+480    	; 0x1f8a <__fp_split3>
    1daa:	98 f3       	brcs	.-26     	; 0x1d92 <__divsf3+0x4>

00001dac <__divsf3_pse>:
    1dac:	99 23       	and	r25, r25
    1dae:	c9 f3       	breq	.-14     	; 0x1da2 <__divsf3+0x14>
    1db0:	55 23       	and	r21, r21
    1db2:	b1 f3       	breq	.-20     	; 0x1da0 <__divsf3+0x12>
    1db4:	95 1b       	sub	r25, r21
    1db6:	55 0b       	sbc	r21, r21
    1db8:	bb 27       	eor	r27, r27
    1dba:	aa 27       	eor	r26, r26
    1dbc:	62 17       	cp	r22, r18
    1dbe:	73 07       	cpc	r23, r19
    1dc0:	84 07       	cpc	r24, r20
    1dc2:	38 f0       	brcs	.+14     	; 0x1dd2 <__divsf3_pse+0x26>
    1dc4:	9f 5f       	subi	r25, 0xFF	; 255
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	22 0f       	add	r18, r18
    1dca:	33 1f       	adc	r19, r19
    1dcc:	44 1f       	adc	r20, r20
    1dce:	aa 1f       	adc	r26, r26
    1dd0:	a9 f3       	breq	.-22     	; 0x1dbc <__divsf3_pse+0x10>
    1dd2:	33 d0       	rcall	.+102    	; 0x1e3a <__divsf3_pse+0x8e>
    1dd4:	0e 2e       	mov	r0, r30
    1dd6:	3a f0       	brmi	.+14     	; 0x1de6 <__divsf3_pse+0x3a>
    1dd8:	e0 e8       	ldi	r30, 0x80	; 128
    1dda:	30 d0       	rcall	.+96     	; 0x1e3c <__divsf3_pse+0x90>
    1ddc:	91 50       	subi	r25, 0x01	; 1
    1dde:	50 40       	sbci	r21, 0x00	; 0
    1de0:	e6 95       	lsr	r30
    1de2:	00 1c       	adc	r0, r0
    1de4:	ca f7       	brpl	.-14     	; 0x1dd8 <__divsf3_pse+0x2c>
    1de6:	29 d0       	rcall	.+82     	; 0x1e3a <__divsf3_pse+0x8e>
    1de8:	fe 2f       	mov	r31, r30
    1dea:	27 d0       	rcall	.+78     	; 0x1e3a <__divsf3_pse+0x8e>
    1dec:	66 0f       	add	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	88 1f       	adc	r24, r24
    1df2:	bb 1f       	adc	r27, r27
    1df4:	26 17       	cp	r18, r22
    1df6:	37 07       	cpc	r19, r23
    1df8:	48 07       	cpc	r20, r24
    1dfa:	ab 07       	cpc	r26, r27
    1dfc:	b0 e8       	ldi	r27, 0x80	; 128
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <__divsf3_pse+0x56>
    1e00:	bb 0b       	sbc	r27, r27
    1e02:	80 2d       	mov	r24, r0
    1e04:	bf 01       	movw	r22, r30
    1e06:	ff 27       	eor	r31, r31
    1e08:	93 58       	subi	r25, 0x83	; 131
    1e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0c:	2a f0       	brmi	.+10     	; 0x1e18 <__divsf3_pse+0x6c>
    1e0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e10:	51 05       	cpc	r21, r1
    1e12:	68 f0       	brcs	.+26     	; 0x1e2e <__divsf3_pse+0x82>
    1e14:	92 c0       	rjmp	.+292    	; 0x1f3a <__fp_inf>
    1e16:	dc c0       	rjmp	.+440    	; 0x1fd0 <__fp_szero>
    1e18:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1a:	ec f3       	brlt	.-6      	; 0x1e16 <__divsf3_pse+0x6a>
    1e1c:	98 3e       	cpi	r25, 0xE8	; 232
    1e1e:	dc f3       	brlt	.-10     	; 0x1e16 <__divsf3_pse+0x6a>
    1e20:	86 95       	lsr	r24
    1e22:	77 95       	ror	r23
    1e24:	67 95       	ror	r22
    1e26:	b7 95       	ror	r27
    1e28:	f7 95       	ror	r31
    1e2a:	9f 5f       	subi	r25, 0xFF	; 255
    1e2c:	c9 f7       	brne	.-14     	; 0x1e20 <__divsf3_pse+0x74>
    1e2e:	88 0f       	add	r24, r24
    1e30:	91 1d       	adc	r25, r1
    1e32:	96 95       	lsr	r25
    1e34:	87 95       	ror	r24
    1e36:	97 f9       	bld	r25, 7
    1e38:	08 95       	ret
    1e3a:	e1 e0       	ldi	r30, 0x01	; 1
    1e3c:	66 0f       	add	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	88 1f       	adc	r24, r24
    1e42:	bb 1f       	adc	r27, r27
    1e44:	62 17       	cp	r22, r18
    1e46:	73 07       	cpc	r23, r19
    1e48:	84 07       	cpc	r24, r20
    1e4a:	ba 07       	cpc	r27, r26
    1e4c:	20 f0       	brcs	.+8      	; 0x1e56 <__divsf3_pse+0xaa>
    1e4e:	62 1b       	sub	r22, r18
    1e50:	73 0b       	sbc	r23, r19
    1e52:	84 0b       	sbc	r24, r20
    1e54:	ba 0b       	sbc	r27, r26
    1e56:	ee 1f       	adc	r30, r30
    1e58:	88 f7       	brcc	.-30     	; 0x1e3c <__divsf3_pse+0x90>
    1e5a:	e0 95       	com	r30
    1e5c:	08 95       	ret

00001e5e <__fixsfsi>:
    1e5e:	04 d0       	rcall	.+8      	; 0x1e68 <__fixunssfsi>
    1e60:	68 94       	set
    1e62:	b1 11       	cpse	r27, r1
    1e64:	b5 c0       	rjmp	.+362    	; 0x1fd0 <__fp_szero>
    1e66:	08 95       	ret

00001e68 <__fixunssfsi>:
    1e68:	98 d0       	rcall	.+304    	; 0x1f9a <__fp_splitA>
    1e6a:	88 f0       	brcs	.+34     	; 0x1e8e <__fixunssfsi+0x26>
    1e6c:	9f 57       	subi	r25, 0x7F	; 127
    1e6e:	90 f0       	brcs	.+36     	; 0x1e94 <__fixunssfsi+0x2c>
    1e70:	b9 2f       	mov	r27, r25
    1e72:	99 27       	eor	r25, r25
    1e74:	b7 51       	subi	r27, 0x17	; 23
    1e76:	a0 f0       	brcs	.+40     	; 0x1ea0 <__fixunssfsi+0x38>
    1e78:	d1 f0       	breq	.+52     	; 0x1eae <__fixunssfsi+0x46>
    1e7a:	66 0f       	add	r22, r22
    1e7c:	77 1f       	adc	r23, r23
    1e7e:	88 1f       	adc	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	1a f0       	brmi	.+6      	; 0x1e8a <__fixunssfsi+0x22>
    1e84:	ba 95       	dec	r27
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__fixunssfsi+0x12>
    1e88:	12 c0       	rjmp	.+36     	; 0x1eae <__fixunssfsi+0x46>
    1e8a:	b1 30       	cpi	r27, 0x01	; 1
    1e8c:	81 f0       	breq	.+32     	; 0x1eae <__fixunssfsi+0x46>
    1e8e:	9f d0       	rcall	.+318    	; 0x1fce <__fp_zero>
    1e90:	b1 e0       	ldi	r27, 0x01	; 1
    1e92:	08 95       	ret
    1e94:	9c c0       	rjmp	.+312    	; 0x1fce <__fp_zero>
    1e96:	67 2f       	mov	r22, r23
    1e98:	78 2f       	mov	r23, r24
    1e9a:	88 27       	eor	r24, r24
    1e9c:	b8 5f       	subi	r27, 0xF8	; 248
    1e9e:	39 f0       	breq	.+14     	; 0x1eae <__fixunssfsi+0x46>
    1ea0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ea2:	cc f3       	brlt	.-14     	; 0x1e96 <__fixunssfsi+0x2e>
    1ea4:	86 95       	lsr	r24
    1ea6:	77 95       	ror	r23
    1ea8:	67 95       	ror	r22
    1eaa:	b3 95       	inc	r27
    1eac:	d9 f7       	brne	.-10     	; 0x1ea4 <__fixunssfsi+0x3c>
    1eae:	3e f4       	brtc	.+14     	; 0x1ebe <__fixunssfsi+0x56>
    1eb0:	90 95       	com	r25
    1eb2:	80 95       	com	r24
    1eb4:	70 95       	com	r23
    1eb6:	61 95       	neg	r22
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	8f 4f       	sbci	r24, 0xFF	; 255
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	08 95       	ret

00001ec0 <__floatunsisf>:
    1ec0:	e8 94       	clt
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <__floatsisf+0x12>

00001ec4 <__floatsisf>:
    1ec4:	97 fb       	bst	r25, 7
    1ec6:	3e f4       	brtc	.+14     	; 0x1ed6 <__floatsisf+0x12>
    1ec8:	90 95       	com	r25
    1eca:	80 95       	com	r24
    1ecc:	70 95       	com	r23
    1ece:	61 95       	neg	r22
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	99 23       	and	r25, r25
    1ed8:	a9 f0       	breq	.+42     	; 0x1f04 <__floatsisf+0x40>
    1eda:	f9 2f       	mov	r31, r25
    1edc:	96 e9       	ldi	r25, 0x96	; 150
    1ede:	bb 27       	eor	r27, r27
    1ee0:	93 95       	inc	r25
    1ee2:	f6 95       	lsr	r31
    1ee4:	87 95       	ror	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	f1 11       	cpse	r31, r1
    1eee:	f8 cf       	rjmp	.-16     	; 0x1ee0 <__floatsisf+0x1c>
    1ef0:	fa f4       	brpl	.+62     	; 0x1f30 <__floatsisf+0x6c>
    1ef2:	bb 0f       	add	r27, r27
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <__floatsisf+0x36>
    1ef6:	60 ff       	sbrs	r22, 0
    1ef8:	1b c0       	rjmp	.+54     	; 0x1f30 <__floatsisf+0x6c>
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	16 c0       	rjmp	.+44     	; 0x1f30 <__floatsisf+0x6c>
    1f04:	88 23       	and	r24, r24
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <__floatsisf+0x48>
    1f08:	96 e9       	ldi	r25, 0x96	; 150
    1f0a:	11 c0       	rjmp	.+34     	; 0x1f2e <__floatsisf+0x6a>
    1f0c:	77 23       	and	r23, r23
    1f0e:	21 f0       	breq	.+8      	; 0x1f18 <__floatsisf+0x54>
    1f10:	9e e8       	ldi	r25, 0x8E	; 142
    1f12:	87 2f       	mov	r24, r23
    1f14:	76 2f       	mov	r23, r22
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <__floatsisf+0x5e>
    1f18:	66 23       	and	r22, r22
    1f1a:	71 f0       	breq	.+28     	; 0x1f38 <__floatsisf+0x74>
    1f1c:	96 e8       	ldi	r25, 0x86	; 134
    1f1e:	86 2f       	mov	r24, r22
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	2a f0       	brmi	.+10     	; 0x1f30 <__floatsisf+0x6c>
    1f26:	9a 95       	dec	r25
    1f28:	66 0f       	add	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	da f7       	brpl	.-10     	; 0x1f26 <__floatsisf+0x62>
    1f30:	88 0f       	add	r24, r24
    1f32:	96 95       	lsr	r25
    1f34:	87 95       	ror	r24
    1f36:	97 f9       	bld	r25, 7
    1f38:	08 95       	ret

00001f3a <__fp_inf>:
    1f3a:	97 f9       	bld	r25, 7
    1f3c:	9f 67       	ori	r25, 0x7F	; 127
    1f3e:	80 e8       	ldi	r24, 0x80	; 128
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	08 95       	ret

00001f46 <__fp_nan>:
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	80 ec       	ldi	r24, 0xC0	; 192
    1f4a:	08 95       	ret

00001f4c <__fp_pscA>:
    1f4c:	00 24       	eor	r0, r0
    1f4e:	0a 94       	dec	r0
    1f50:	16 16       	cp	r1, r22
    1f52:	17 06       	cpc	r1, r23
    1f54:	18 06       	cpc	r1, r24
    1f56:	09 06       	cpc	r0, r25
    1f58:	08 95       	ret

00001f5a <__fp_pscB>:
    1f5a:	00 24       	eor	r0, r0
    1f5c:	0a 94       	dec	r0
    1f5e:	12 16       	cp	r1, r18
    1f60:	13 06       	cpc	r1, r19
    1f62:	14 06       	cpc	r1, r20
    1f64:	05 06       	cpc	r0, r21
    1f66:	08 95       	ret

00001f68 <__fp_round>:
    1f68:	09 2e       	mov	r0, r25
    1f6a:	03 94       	inc	r0
    1f6c:	00 0c       	add	r0, r0
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <__fp_round+0xc>
    1f70:	88 23       	and	r24, r24
    1f72:	52 f0       	brmi	.+20     	; 0x1f88 <__fp_round+0x20>
    1f74:	bb 0f       	add	r27, r27
    1f76:	40 f4       	brcc	.+16     	; 0x1f88 <__fp_round+0x20>
    1f78:	bf 2b       	or	r27, r31
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <__fp_round+0x18>
    1f7c:	60 ff       	sbrs	r22, 0
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <__fp_round+0x20>
    1f80:	6f 5f       	subi	r22, 0xFF	; 255
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	8f 4f       	sbci	r24, 0xFF	; 255
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	08 95       	ret

00001f8a <__fp_split3>:
    1f8a:	57 fd       	sbrc	r21, 7
    1f8c:	90 58       	subi	r25, 0x80	; 128
    1f8e:	44 0f       	add	r20, r20
    1f90:	55 1f       	adc	r21, r21
    1f92:	59 f0       	breq	.+22     	; 0x1faa <__fp_splitA+0x10>
    1f94:	5f 3f       	cpi	r21, 0xFF	; 255
    1f96:	71 f0       	breq	.+28     	; 0x1fb4 <__fp_splitA+0x1a>
    1f98:	47 95       	ror	r20

00001f9a <__fp_splitA>:
    1f9a:	88 0f       	add	r24, r24
    1f9c:	97 fb       	bst	r25, 7
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	61 f0       	breq	.+24     	; 0x1fba <__fp_splitA+0x20>
    1fa2:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa4:	79 f0       	breq	.+30     	; 0x1fc4 <__fp_splitA+0x2a>
    1fa6:	87 95       	ror	r24
    1fa8:	08 95       	ret
    1faa:	12 16       	cp	r1, r18
    1fac:	13 06       	cpc	r1, r19
    1fae:	14 06       	cpc	r1, r20
    1fb0:	55 1f       	adc	r21, r21
    1fb2:	f2 cf       	rjmp	.-28     	; 0x1f98 <__fp_split3+0xe>
    1fb4:	46 95       	lsr	r20
    1fb6:	f1 df       	rcall	.-30     	; 0x1f9a <__fp_splitA>
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <__fp_splitA+0x30>
    1fba:	16 16       	cp	r1, r22
    1fbc:	17 06       	cpc	r1, r23
    1fbe:	18 06       	cpc	r1, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	f1 cf       	rjmp	.-30     	; 0x1fa6 <__fp_splitA+0xc>
    1fc4:	86 95       	lsr	r24
    1fc6:	71 05       	cpc	r23, r1
    1fc8:	61 05       	cpc	r22, r1
    1fca:	08 94       	sec
    1fcc:	08 95       	ret

00001fce <__fp_zero>:
    1fce:	e8 94       	clt

00001fd0 <__fp_szero>:
    1fd0:	bb 27       	eor	r27, r27
    1fd2:	66 27       	eor	r22, r22
    1fd4:	77 27       	eor	r23, r23
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	97 f9       	bld	r25, 7
    1fda:	08 95       	ret

00001fdc <__mulsf3>:
    1fdc:	0b d0       	rcall	.+22     	; 0x1ff4 <__mulsf3x>
    1fde:	c4 cf       	rjmp	.-120    	; 0x1f68 <__fp_round>
    1fe0:	b5 df       	rcall	.-150    	; 0x1f4c <__fp_pscA>
    1fe2:	28 f0       	brcs	.+10     	; 0x1fee <__mulsf3+0x12>
    1fe4:	ba df       	rcall	.-140    	; 0x1f5a <__fp_pscB>
    1fe6:	18 f0       	brcs	.+6      	; 0x1fee <__mulsf3+0x12>
    1fe8:	95 23       	and	r25, r21
    1fea:	09 f0       	breq	.+2      	; 0x1fee <__mulsf3+0x12>
    1fec:	a6 cf       	rjmp	.-180    	; 0x1f3a <__fp_inf>
    1fee:	ab cf       	rjmp	.-170    	; 0x1f46 <__fp_nan>
    1ff0:	11 24       	eor	r1, r1
    1ff2:	ee cf       	rjmp	.-36     	; 0x1fd0 <__fp_szero>

00001ff4 <__mulsf3x>:
    1ff4:	ca df       	rcall	.-108    	; 0x1f8a <__fp_split3>
    1ff6:	a0 f3       	brcs	.-24     	; 0x1fe0 <__mulsf3+0x4>

00001ff8 <__mulsf3_pse>:
    1ff8:	95 9f       	mul	r25, r21
    1ffa:	d1 f3       	breq	.-12     	; 0x1ff0 <__mulsf3+0x14>
    1ffc:	95 0f       	add	r25, r21
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	55 1f       	adc	r21, r21
    2002:	62 9f       	mul	r22, r18
    2004:	f0 01       	movw	r30, r0
    2006:	72 9f       	mul	r23, r18
    2008:	bb 27       	eor	r27, r27
    200a:	f0 0d       	add	r31, r0
    200c:	b1 1d       	adc	r27, r1
    200e:	63 9f       	mul	r22, r19
    2010:	aa 27       	eor	r26, r26
    2012:	f0 0d       	add	r31, r0
    2014:	b1 1d       	adc	r27, r1
    2016:	aa 1f       	adc	r26, r26
    2018:	64 9f       	mul	r22, r20
    201a:	66 27       	eor	r22, r22
    201c:	b0 0d       	add	r27, r0
    201e:	a1 1d       	adc	r26, r1
    2020:	66 1f       	adc	r22, r22
    2022:	82 9f       	mul	r24, r18
    2024:	22 27       	eor	r18, r18
    2026:	b0 0d       	add	r27, r0
    2028:	a1 1d       	adc	r26, r1
    202a:	62 1f       	adc	r22, r18
    202c:	73 9f       	mul	r23, r19
    202e:	b0 0d       	add	r27, r0
    2030:	a1 1d       	adc	r26, r1
    2032:	62 1f       	adc	r22, r18
    2034:	83 9f       	mul	r24, r19
    2036:	a0 0d       	add	r26, r0
    2038:	61 1d       	adc	r22, r1
    203a:	22 1f       	adc	r18, r18
    203c:	74 9f       	mul	r23, r20
    203e:	33 27       	eor	r19, r19
    2040:	a0 0d       	add	r26, r0
    2042:	61 1d       	adc	r22, r1
    2044:	23 1f       	adc	r18, r19
    2046:	84 9f       	mul	r24, r20
    2048:	60 0d       	add	r22, r0
    204a:	21 1d       	adc	r18, r1
    204c:	82 2f       	mov	r24, r18
    204e:	76 2f       	mov	r23, r22
    2050:	6a 2f       	mov	r22, r26
    2052:	11 24       	eor	r1, r1
    2054:	9f 57       	subi	r25, 0x7F	; 127
    2056:	50 40       	sbci	r21, 0x00	; 0
    2058:	8a f0       	brmi	.+34     	; 0x207c <__mulsf3_pse+0x84>
    205a:	e1 f0       	breq	.+56     	; 0x2094 <__mulsf3_pse+0x9c>
    205c:	88 23       	and	r24, r24
    205e:	4a f0       	brmi	.+18     	; 0x2072 <__mulsf3_pse+0x7a>
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	bb 1f       	adc	r27, r27
    2066:	66 1f       	adc	r22, r22
    2068:	77 1f       	adc	r23, r23
    206a:	88 1f       	adc	r24, r24
    206c:	91 50       	subi	r25, 0x01	; 1
    206e:	50 40       	sbci	r21, 0x00	; 0
    2070:	a9 f7       	brne	.-22     	; 0x205c <__mulsf3_pse+0x64>
    2072:	9e 3f       	cpi	r25, 0xFE	; 254
    2074:	51 05       	cpc	r21, r1
    2076:	70 f0       	brcs	.+28     	; 0x2094 <__mulsf3_pse+0x9c>
    2078:	60 cf       	rjmp	.-320    	; 0x1f3a <__fp_inf>
    207a:	aa cf       	rjmp	.-172    	; 0x1fd0 <__fp_szero>
    207c:	5f 3f       	cpi	r21, 0xFF	; 255
    207e:	ec f3       	brlt	.-6      	; 0x207a <__mulsf3_pse+0x82>
    2080:	98 3e       	cpi	r25, 0xE8	; 232
    2082:	dc f3       	brlt	.-10     	; 0x207a <__mulsf3_pse+0x82>
    2084:	86 95       	lsr	r24
    2086:	77 95       	ror	r23
    2088:	67 95       	ror	r22
    208a:	b7 95       	ror	r27
    208c:	f7 95       	ror	r31
    208e:	e7 95       	ror	r30
    2090:	9f 5f       	subi	r25, 0xFF	; 255
    2092:	c1 f7       	brne	.-16     	; 0x2084 <__mulsf3_pse+0x8c>
    2094:	fe 2b       	or	r31, r30
    2096:	88 0f       	add	r24, r24
    2098:	91 1d       	adc	r25, r1
    209a:	96 95       	lsr	r25
    209c:	87 95       	ror	r24
    209e:	97 f9       	bld	r25, 7
    20a0:	08 95       	ret

000020a2 <__divmodhi4>:
    20a2:	97 fb       	bst	r25, 7
    20a4:	09 2e       	mov	r0, r25
    20a6:	07 26       	eor	r0, r23
    20a8:	0a d0       	rcall	.+20     	; 0x20be <__divmodhi4_neg1>
    20aa:	77 fd       	sbrc	r23, 7
    20ac:	04 d0       	rcall	.+8      	; 0x20b6 <__divmodhi4_neg2>
    20ae:	0c d0       	rcall	.+24     	; 0x20c8 <__udivmodhi4>
    20b0:	06 d0       	rcall	.+12     	; 0x20be <__divmodhi4_neg1>
    20b2:	00 20       	and	r0, r0
    20b4:	1a f4       	brpl	.+6      	; 0x20bc <__divmodhi4_exit>

000020b6 <__divmodhi4_neg2>:
    20b6:	70 95       	com	r23
    20b8:	61 95       	neg	r22
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255

000020bc <__divmodhi4_exit>:
    20bc:	08 95       	ret

000020be <__divmodhi4_neg1>:
    20be:	f6 f7       	brtc	.-4      	; 0x20bc <__divmodhi4_exit>
    20c0:	90 95       	com	r25
    20c2:	81 95       	neg	r24
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	08 95       	ret

000020c8 <__udivmodhi4>:
    20c8:	aa 1b       	sub	r26, r26
    20ca:	bb 1b       	sub	r27, r27
    20cc:	51 e1       	ldi	r21, 0x11	; 17
    20ce:	07 c0       	rjmp	.+14     	; 0x20de <__udivmodhi4_ep>

000020d0 <__udivmodhi4_loop>:
    20d0:	aa 1f       	adc	r26, r26
    20d2:	bb 1f       	adc	r27, r27
    20d4:	a6 17       	cp	r26, r22
    20d6:	b7 07       	cpc	r27, r23
    20d8:	10 f0       	brcs	.+4      	; 0x20de <__udivmodhi4_ep>
    20da:	a6 1b       	sub	r26, r22
    20dc:	b7 0b       	sbc	r27, r23

000020de <__udivmodhi4_ep>:
    20de:	88 1f       	adc	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	5a 95       	dec	r21
    20e4:	a9 f7       	brne	.-22     	; 0x20d0 <__udivmodhi4_loop>
    20e6:	80 95       	com	r24
    20e8:	90 95       	com	r25
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	08 95       	ret

000020f0 <_exit>:
    20f0:	f8 94       	cli

000020f2 <__stop_program>:
    20f2:	ff cf       	rjmp	.-2      	; 0x20f2 <__stop_program>
